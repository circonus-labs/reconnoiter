.SUFFIXES: .lo .re .c

Q=
ifeq ($(V),)
	Q=@
endif

LIBNOIT_VERSION=0.0.1

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libdir=@libdir@
includedir=@includedir@
libexecdir=@libexecdir@
localstatedir=@localstatedir@
datarootdir=@datarootdir@
datadir=@datadir@
mandir=@mandir@
mansubdir=@mansubdir@
docdir=${prefix}/@docdir@
sysconfdir=@sysconfdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@
MODULES_DIR=@MODULES_DIR@
MTEV_MODULES_DIR=@MTEV_MODULES_DIR@

CC=@CC@
SHLD=@SHLD@
CPPFLAGS=@CPPFLAGS@
CFLAGS=@CFLAGS@
SHCFLAGS=@SHCFLAGS@
CLINKFLAGS=@CLINKFLAGS@
LUACFLAGS=@LUACFLAGS@
PGCFLAGS=@PGCFLAGS@
LDFLAGS=@LDFLAGS@ -L$(libdir)
RLDFLAG=@RLDFLAG@
ifneq ($(strip $(RLDFLAG)),)
  LDFLAGS += @RLDFLAG@$(libdir)
endif
SHLDFLAGS=@SHLDFLAGS@
LIBNOIT_LIBS=@LIBNOIT_LIBS@
DEPFLAGS=@DEPFLAGS@
MODULELD=@MODULELD@
AR=@AR@
RANLIB=@RANLIB@
LIBS=@LIBS@
INSTALL=@INSTALL@
XML2H=@top_srcdir@/buildtools/xml2h
MAPFLAGS=@MAPFLAGS@
CTFCONVERT=@CTFCONVERT@
CTFMERGE=@CTFMERGE@

# Later versions of ctf* tools no longer have -g and by default do not strip,
# so we get the same behavior as with -g on older versions.
ifneq ($(wildcard $(CTFCONVERT)),)
  HAS_G=$(shell $(CTFCONVERT) 2>&1 | grep -- -gis)
  ifneq ($(HAS_G),)
    CTFNOSTRIP=-g
  else
    CTFNOSTRIP=
  endif
endif

WHOLE_ARCHIVE=@WHOLE_ARCHIVE@
NOWHOLE_ARCHIVE=@NOWHOLE_ARCHIVE@

DTRACEOBJ=@DTRACEOBJ@
NOITD_DTRACEOBJ=$(DTRACEOBJ:%dtrace_stub.o=noitd_%dtrace_stub.o)
STRATCOND_DTRACEOBJ=$(DTRACEOBJ:%dtrace_stub.o=stratcond_%dtrace_stub.o)
LIBNOIT_V=libnoit@DOTSO@.$(LIBNOIT_VERSION)@DOTDYLIB@
LIBNOIT=libnoit@DOTSO@@DOTDYLIB@

TARGETS=noitd stratcond noit_b2sm noit.conf test-noit.conf stratcon.conf test-stratcon.conf \
	$(LIBNOIT) @MDB_MODS@

all:	reversion $(TARGETS) java-bits make-modules make-man tests

tests:
	$(MAKE) -C modules

MODDIR=modules

HEADERS=noit_metric.h noit_check_log_helpers.h noit_check_tools_shared.h noit_metric_rollup.h

NOIT_HEADERS=noit_check.h noit_check_resolver.h \
	noit_check_rest.h noit_check_tools.h \
	noit_conf_checks.h \
	noit_filters.h noit_jlog_listener.h noit_livestream_listener.h \
	noit_websocket_handler.h noit_module.h noit_metric_director.h \
	noit_metric.h noit_message_decoder.h

STRATCON_HEADERS=stratcon_datastore.h stratcon_iep.h stratcon_ingest.h \
	stratcon_jlog_streamer.h stratcon_realtime_http.h

ENABLE_LUA=@ENABLE_LUA@
LUALIBS=@LUALIBS@

LIBNOIT_OBJS=noit_check_log_helpers.lo bundle.pb-c.lo \
	noit_check_tools_shared.lo stratcon_ingest.lo noit_metric_rollup.lo

B2SM_OBJS=noit_b2sm.o noit_check_log_helpers.o bundle.pb-c.o

NOIT_OBJS=noitd.o noit_mtev_bridge.o \
	noit_check_resolver.o noit_metric_director.o noit_message_decoder.o \
	noit_check.o noit_check_log.o noit_check_tools.o \
	noit_module.o noit_conf_checks.o \
	noit_jlog_listener.o noit_livestream_listener.o noit_filters.o \
	noit_check_rest.o noit_filters_rest.o noit_websocket_handler.o \
	noit_metric.o \
	$(LIBNOIT_OBJS:%.lo=%.o)

STRATCON_OBJS=stratcond.o noit_mtev_bridge.o \
	stratcon_realtime_http.o \
	stratcon_jlog_streamer.o stratcon_datastore.o \
	stratcon_iep.o \
	$(LIBNOIT_OBJS:%.lo=%.o)

FINAL_STRATCON_OBJS=$(STRATCON_OBJS:%.o=stratcon-objs/%.o)
FINAL_NOIT_OBJS=$(NOIT_OBJS:%.o=noit-objs/%.o)
FINAL_LIBNOIT_OBJS=$(LIBNOIT_OBJS:%.lo=libnoit-objs/%.lo)

noit-objs/%.o:	%.o
	@mkdir -p "`dirname $@`"
	@echo "- making private $@"
	@cp $(@:noit-objs/%.o=%.o) $@
	@if test -x "$(CTFCONVERT)" ; then \
		echo "- making CTF ($@)" ; \
		$(CTFCONVERT) $(CTFNOSTRIP) -i -l @VERSION@ $@ ; \
	fi

libnoit-objs/%.lo:	%.lo
	@mkdir -p "`dirname $@`"
	@echo "- making private $@"
	@cp $(@:libnoit-objs/%.lo=%.lo) $@
	@if test -x "$(CTFCONVERT)" ; then \
		echo "- making CTF ($@)" ; \
		$(CTFCONVERT) $(CTFNOSTRIP) -i -l @VERSION@ $@ ; \
	fi

stratcon-objs/%.o:	%.o
	@mkdir -p "`dirname $@`"
	@echo "- making private $@"
	@cp $(@:stratcon-objs/%.o=%.o) $@
	@if test -x "$(CTFCONVERT)" ; then \
		echo "- making CTF ($@)" ; \
		$(CTFCONVERT) $(CTFNOSTRIP) -i -l @VERSION@ $@ ; \
	fi

make-man:
	@(cd man && $(MAKE) -s)

make-modules:
	@for dir in $(MODDIR) ; do \
		(cd $$dir && $(MAKE) -s) ; \
	done

java-bits:
	@-test -n "@JAVAPARTS@" && (cd java && $(MAKE) -s)

.PHONY:	reversion

reversion:
	@$(top_srcdir)/buildtools/mkversion.sh noit_version.h

noit_version.h:
	@$(top_srcdir)/buildtools/mkversion.sh noit_version.h

noit.env:	noit_version.h noit_config.h
	awk '/^#define[ 	]+NOIT_BRANCH/{print $$2"="$$3;}' < noit_version.h > $@
	cat noit_version.h | tr '[".]' ' ' | awk '/^#define[ 	]+NOIT_VERSION/{print $$2"=\""$$3"\""; print $$2"_TSTAMP=\""$$4"\"";}' >> $@
	awk '/^#define[ 	]+NOIT_UNAME_[^V]/{print "BUILD_"$$2"="$$3;}' < noit_config.h >> $@

man/noitd.usage.h:	make-man

man/stratcond.usage.h:	make-man


noitd.o:	man/noitd.usage.h
stratcond.o:	man/stratcond.usage.h

stratcon_jlog_streamer.o:	noit_@DTRACEHDR@ stratcon_@DTRACEHDR@
noit_check_tools.o:	noit_@DTRACEHDR@ stratcon_@DTRACEHDR@
noit_check.o:	noit_@DTRACEHDR@ stratcon_@DTRACEHDR@
dtrace_probes.h:	noit_@DTRACEHDR@ stratcon_@DTRACEHDR@ libnoit_@DTRACEHDR@

$(LIBNOIT):	$(LIBNOIT_V)
	ln -sf $(LIBNOIT_V) $(LIBNOIT)

$(LIBNOIT_V):	$(FINAL_LIBNOIT_OBJS)
	@echo "- linking $@"
	$(SHLD) $(SHLDFLAGS) -o $@ @LD_LIBNOIT_VERSION@ $(FINAL_LIBNOIT_OBJS) $(LIBNOIT_LIBS) -L. -lmtev

stratcond_@DTRACEOBJ@:    $(FINAL_STRATCON_OBJS)
	@echo "- assembling $@" && \
	@DTRACE@ @DTRACEFLAGS@ -Z -G -s stratcon_dtrace_probes.d -o stratcond_@DTRACEOBJ@ $(FINAL_STRATCON_OBJS)

noitd_@DTRACEOBJ@:    $(FINAL_NOIT_OBJS)
	@echo "- assembling $@" && \
	@DTRACE@ @DTRACEFLAGS@ -Z -G -s noit_dtrace_probes.d -o noitd_@DTRACEOBJ@ $(FINAL_NOIT_OBJS)

noit_@DTRACEHDR@:    noit_dtrace_probes.d
	@if test -z "@DTRACE@" ; then \
		echo "- faking dtrace header" ; \
		cp ./noit_@DTRACEHDR@.stock ./noit_@DTRACEHDR@ ; \
	else \
		echo "- building dtrace header $@" ; \
		@DTRACE@ -h -s noit_dtrace_probes.d ; \
	fi

stratcon_@DTRACEHDR@:    stratcon_dtrace_probes.d
	@if test -z "@DTRACE@" ; then \
		echo "- faking dtrace header" ; \
		cp ./stratcon_@DTRACEHDR@.stock ./stratcon_@DTRACEHDR@ ; \
	else \
		echo "- building dtrace header $@" ; \
		@DTRACE@ -h -s stratcon_dtrace_probes.d ; \
	fi

noit_b2sm:	$(B2SM_OBJS)
	@echo "- linking $@"
	@$(CC) $(CLINKFLAGS) -o $@ $(B2SM_OBJS) \
		$(LDFLAGS) \
		$(LIBS) -L. -lmtev $(LUALIBS) -ljlog

noitd:	$(FINAL_NOIT_OBJS) man/noitd.usage.h $(NOITD_DTRACEOBJ)
	@echo "- linking $@"
	@$(CC) $(CLINKFLAGS) -o $@ $(FINAL_NOIT_OBJS) \
		$(NOITD_DTRACEOBJ) \
		$(LDFLAGS) \
		$(MAPFLAGS) \
		$(LIBS) -L. -lmtev $(LUALIBS) -ljlog
	@if test -x "$(CTFMERGE)" ; then \
		$(CTFMERGE) $(CTFNOSTRIP) -l @VERSION@ -o $@ $(FINAL_NOIT_OBJS) $(NOITD_DTRACEOBJ) ; \
	fi

stratcond:	$(FINAL_STRATCON_OBJS) $(STRATCOND_DTRACEOBJ)
	@echo "- linking $@"
	$(CC) $(CLINKFLAGS) -o $@ $(FINAL_STRATCON_OBJS) \
		$(STRATCOND_DTRACEOBJ) \
		$(LDFLAGS) \
		$(MAPFLAGS) \
		$(LIBS) -L. -lmtev
	@if test -x "$(CTFMERGE)" ; then \
		$(CTFMERGE) $(CTFNOSTRIP) -l @VERSION@ -o $@ $(FINAL_STRATCON_OBJS) $(STRATCOND_DTRACEOBJ) ; \
	fi

mdb-support/mdb_help.lo:	mdb-support/mdb_help.c
	@echo "- compiling $@"
	@$(CC) -Imdb-support $(CPPFLAGS) $(SHCFLAGS) $(CFLAGS) -o $@ -c $<

SHAREDMDBMODSRC=

stratcon_datastore.o:	stratcon_datastore.c
	@echo "- compiling $<"
	@$(CC) $(CPPFLAGS) $(PGCFLAGS) $(CFLAGS) -c $<

.c.lo:
	$(Q)if [ "`dirname $@`" != "." ] ; then \
		(cd "`dirname $@`" && $(MAKE) "`basename $@`") ; \
	else \
		echo "- compiling $<" ; \
	  $(CC) $(CPPFLAGS) $(SHCFLAGS) -c $< -o $@ ; \
	fi

.c.o:
	$(Q)if [ "`dirname $@`" != "." ] ; then \
		(cd "`dirname $@`" && $(MAKE) "`basename $@`") ; \
	else \
		echo "- compiling $<" ; \
		$(CC) $(CPPFLAGS) $(CFLAGS) -c $< ; \
	fi

noit_module.o:	module-online.h

module-online.h:	modules/module-online.xsl
	@echo "- making module-online.h (StyleSheet include)"
	@$(XML2H) helpStyleXML < modules/module-online.xsl > $@

test-noit.conf:	noit.conf.in Makefile
	@mkdir -p scratch/var/log scratch/var/run
	@sed -e "s^%sysconfdir%^`pwd`^g;" \
		-e "s^%modulesdir%^`pwd`/modules^g;" \
		-e "s^%mtevmodulesdir%^$(MTEV_MODULES_DIR)^g;" \
		-e "s^%modulesluadir%^`pwd`/modules-lua^g;" \
		-e "s^%datarootdir%^`pwd`^g;" \
		-e "s^%PKIPREFIX%^../test/test-^g;" \
		-e "s^/var/^`pwd`/scratch/var/^g;" < \
		noit.conf.in > \
		test-noit.conf

noit.conf:	noit.conf.in Makefile
	@sed -e "s^%sysconfdir%^$(sysconfdir)^g;" \
		-e "s^%modulesdir%^$(MODULES_DIR)^g;" \
		-e "s^%mtevmodulesdir%^$(MTEV_MODULES_DIR)^g;" \
		-e "s^%modulesluadir%^$(MODULES_DIR)^g;" \
		-e "s^%datarootdir%^$(datadir)^g;" \
		-e "s^%PKIPREFIX%^$${PKIPREFIX}^g;" \
		-e "s^/var/^`pwd`/scratch/var/^g;" < \
		noit.conf.in > \
		noit.conf

test-stratcon.conf:	stratcon.conf.in Makefile
	@sed -e "s^%sysconfdir%^`pwd`^g;" \
		-e "s^%modulesdir%^`pwd`/modules^g;" \
		-e "s^%modulesluadir%^`pwd`/modules-lua^g;" \
		-e "s^%iepbindir%^`pwd`/java^g;" \
		-e "s^%iepdbdir%^`pwd`/java^g;" \
		-e "s^%PKIPREFIX%^../test/test-^g;" < \
		stratcon.conf.in > \
		test-stratcon.conf

stratcon.conf:	stratcon.conf.in Makefile
	@sed -e "s^%sysconfdir%^$(sysconfdir)^g;" \
		-e "s^%modulesdir%^$(MODULES_DIR)^g;" \
		-e "s^%modulesluadir%^$(MODULES_DIR)^g;" \
		-e "s^%iepbindir%^$(bindir)^g;" \
                -e "s^%iepdbdir%^$(localstatedir)/db/noit-iep^g;" \
		-e "s^%PKIPREFIX%^$${PKIPREFIX}^g;" < \
		stratcon.conf.in > \
		stratcon.conf

install-dirs:
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(sbindir)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(sysconfdir)

install-noitd-headers:	$(NOIT_HEADERS) install-headers
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)
	for file in $(NOIT_HEADERS) ; do \
		$(INSTALL) -m 0644 $$file $(DESTDIR)$(includedir)/$$file ; \
	done

install-stratcond-headers:	$(STRATCON_HEADERS) install-headers
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)
	for file in $(STRATCON_HEADERS) ; do \
		$(INSTALL) -m 0644 $$file $(DESTDIR)$(includedir)/$$file ; \
	done

install-headers:	$(HEADERS)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)
	$(INSTALL) -m 0755 ../buildtools/xml2h $(DESTDIR)$(bindir)/noit-xml2h
	$(INSTALL) -m 0755 scripts/noit-config $(DESTDIR)$(bindir)/noit-config
	for file in $(HEADERS) ; do \
		$(INSTALL) -m 0644 $$file $(DESTDIR)$(includedir)/$$file ; \
	done

noitlibs:	$(LIBNOIT_V) @MDB_MODS@

install-libs:    noitlibs
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(libdir)
	$(INSTALL) -m 0755 $(LIBNOIT_V) $(DESTDIR)$(libdir)/$(LIBNOIT_V)
	ln -sf $(LIBNOIT_V) $(DESTDIR)$(libdir)/$(LIBNOIT)

install-noitd:	install-libs install-noitd-nolibs

install-noitd-nolibs:	install-dirs reversion noitd noit.conf java-bits noit.env
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(datadir)/noit-web
	$(INSTALL) -m 0755 scripts/noittrap $(DESTDIR)$(bindir)/noittrap
	$(INSTALL) -m 0755 noit_b2sm $(DESTDIR)$(bindir)/noit_b2sm
	$(INSTALL) -m 0755 noitd $(DESTDIR)$(sbindir)/noitd
	$(INSTALL) -m 0644 noit.conf $(DESTDIR)$(sysconfdir)/noit.conf.sample
	$(INSTALL) -m 0644 noit.env $(DESTDIR)$(sysconfdir)/noit.env
	$(INSTALL) -m 0644 config_templates.conf $(DESTDIR)$(sysconfdir)/config_templates.conf
	$(INSTALL) -m 0644 default-ca-chain.crt $(DESTDIR)$(sysconfdir)/default-ca-chain.crt
	(cd modules && $(MAKE) install-modules DESTDIR=$(DESTDIR))
	(cd modules-lua && $(MAKE) install DESTDIR=$(DESTDIR))
	(cd noit-web && tar cf - .) | (cd $(DESTDIR)$(datadir)/noit-web && tar xf -)
	-test -n "@JAVAPARTS@" && (cd @JAVAPARTS@ && $(MAKE) install-jezebel DESTDIR=$(DESTDIR))

install-stratcond:	install-libs install-stratcond-nolibs

install-stratcond-nolibs:	install-dirs reversion stratcond stratcon.conf java-bits noit.env
	$(INSTALL) -m 0755 stratcond $(DESTDIR)$(sbindir)/stratcond
	$(INSTALL) -m 0644 stratcon.conf $(DESTDIR)$(sysconfdir)/stratcon.conf.sample
	$(INSTALL) -m 0644 noit.env $(DESTDIR)$(sysconfdir)/stratcon.env
	(cd modules && $(MAKE) install-smodules DESTDIR=$(DESTDIR))
	-test -n "@JAVAPARTS@" && (cd @JAVAPARTS@ && $(MAKE) install-iep DESTDIR=$(DESTDIR))

install-docs:
	(cd man && $(MAKE) install DESTDIR=$(DESTDIR))

install:	install-dirs install-docs install-headers install-noitd install-stratcond install-noitd-headers install-stratcond-headers

clean:
	rm -f *.lo *.o $(TARGETS)
	rm -f $(LIBNOIT)
	rm -f module-online.h noit.env
	rm -rf noit-objs stratcon-objs libnoit-objs
	rm -rf mdb-support/*.lo mdb-support/*.so
	(cd man && $(MAKE) clean)
	(cd modules && $(MAKE) clean)
	(cd java && $(MAKE) clean)

Makefile.noit.dep:
	find noit-objs -name \*.o | sort | awk '{gsub("^.+-objs/", ""); print "noit-objs/"$$1": "$$1;}' > $@

Makefile.stratcon.dep:
	find stratcon-objs -name \*.o | sort | awk '{gsub("^.+-objs/", ""); print "stratcon-objs/"$$1": "$$1;}' > $@

Makefile.dep:
	$(CC) -I. $(CPPFLAGS) $(CFLAGS) $(DEPFLAGS) *.c > Makefile.dep
	$(top_srcdir)/buildtools/culldeps.sh Makefile.dep

include Makefile.dep
include Makefile.noit.dep
include Makefile.stratcon.dep

distclean-subdirs:
	for dir in man modules modules-lua java ; do \
		(cd $$dir && $(MAKE) distclean) ; \
	done

distclean:	clean distclean-subdirs
	rm -f Makefile noit_config.h scripts/noit-config

js/bundle.desc:	bundle.proto
	protoc -ojs/bundle.desc bundle.proto

bundle:
	protoc bundle.proto --java_out=java
	protoc-c bundle.proto --c_out=.
