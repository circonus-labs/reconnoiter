// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
class ResourceSpans;
struct ResourceSpansDefaultTypeInternal;
extern ResourceSpansDefaultTypeInternal _ResourceSpans_default_instance_;
class ScopeSpans;
struct ScopeSpansDefaultTypeInternal;
extern ScopeSpansDefaultTypeInternal _ScopeSpans_default_instance_;
class Span;
struct SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_Event;
struct Span_EventDefaultTypeInternal;
extern Span_EventDefaultTypeInternal _Span_Event_default_instance_;
class Span_Link;
struct Span_LinkDefaultTypeInternal;
extern Span_LinkDefaultTypeInternal _Span_Link_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class TracesData;
struct TracesDataDefaultTypeInternal;
extern TracesDataDefaultTypeInternal _TracesData_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template <>
::opentelemetry::proto::trace::v1::ResourceSpans* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::ResourceSpans>(Arena*);
template <>
::opentelemetry::proto::trace::v1::ScopeSpans* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::ScopeSpans>(Arena*);
template <>
::opentelemetry::proto::trace::v1::Span* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span>(Arena*);
template <>
::opentelemetry::proto::trace::v1::Span_Event* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span_Event>(Arena*);
template <>
::opentelemetry::proto::trace::v1::Span_Link* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span_Link>(Arena*);
template <>
::opentelemetry::proto::trace::v1::Status* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Status>(Arena*);
template <>
::opentelemetry::proto::trace::v1::TracesData* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::TracesData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
enum Span_SpanKind : int {
  Span_SpanKind_SPAN_KIND_UNSPECIFIED = 0,
  Span_SpanKind_SPAN_KIND_INTERNAL = 1,
  Span_SpanKind_SPAN_KIND_SERVER = 2,
  Span_SpanKind_SPAN_KIND_CLIENT = 3,
  Span_SpanKind_SPAN_KIND_PRODUCER = 4,
  Span_SpanKind_SPAN_KIND_CONSUMER = 5,
  Span_SpanKind_Span_SpanKind_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Span_SpanKind_Span_SpanKind_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Span_SpanKind_IsValid(int value);
constexpr Span_SpanKind Span_SpanKind_SpanKind_MIN = static_cast<Span_SpanKind>(0);
constexpr Span_SpanKind Span_SpanKind_SpanKind_MAX = static_cast<Span_SpanKind>(5);
constexpr int Span_SpanKind_SpanKind_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Span_SpanKind_descriptor();
template <typename T>
const std::string& Span_SpanKind_Name(T value) {
  static_assert(std::is_same<T, Span_SpanKind>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SpanKind_Name().");
  return Span_SpanKind_Name(static_cast<Span_SpanKind>(value));
}
template <>
inline const std::string& Span_SpanKind_Name(Span_SpanKind value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Span_SpanKind_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Span_SpanKind_Parse(absl::string_view name, Span_SpanKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_SpanKind>(
      Span_SpanKind_descriptor(), name, value);
}
enum Status_StatusCode : int {
  Status_StatusCode_STATUS_CODE_UNSET = 0,
  Status_StatusCode_STATUS_CODE_OK = 1,
  Status_StatusCode_STATUS_CODE_ERROR = 2,
  Status_StatusCode_Status_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_StatusCode_Status_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_StatusCode_IsValid(int value);
constexpr Status_StatusCode Status_StatusCode_StatusCode_MIN = static_cast<Status_StatusCode>(0);
constexpr Status_StatusCode Status_StatusCode_StatusCode_MAX = static_cast<Status_StatusCode>(2);
constexpr int Status_StatusCode_StatusCode_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Status_StatusCode_descriptor();
template <typename T>
const std::string& Status_StatusCode_Name(T value) {
  static_assert(std::is_same<T, Status_StatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return Status_StatusCode_Name(static_cast<Status_StatusCode>(value));
}
template <>
inline const std::string& Status_StatusCode_Name(Status_StatusCode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Status_StatusCode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Status_StatusCode_Parse(absl::string_view name, Status_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_StatusCode>(
      Status_StatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TracesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.TracesData) */ {
 public:
  inline TracesData() : TracesData(nullptr) {}
  ~TracesData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TracesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracesData(const TracesData& from);
  TracesData(TracesData&& from) noexcept
    : TracesData() {
    *this = ::std::move(from);
  }

  inline TracesData& operator=(const TracesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracesData& operator=(TracesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TracesData* internal_default_instance() {
    return reinterpret_cast<const TracesData*>(
               &_TracesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TracesData& a, TracesData& b) {
    a.Swap(&b);
  }
  inline void Swap(TracesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracesData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TracesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TracesData& from) {
    TracesData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.TracesData";
  }
  protected:
  explicit TracesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceSpansFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
  int resource_spans_size() const;
  private:
  int _internal_resource_spans_size() const;

  public:
  void clear_resource_spans() ;
  ::opentelemetry::proto::trace::v1::ResourceSpans* mutable_resource_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ResourceSpans >*
      mutable_resource_spans();
  private:
  const ::opentelemetry::proto::trace::v1::ResourceSpans& _internal_resource_spans(int index) const;
  ::opentelemetry::proto::trace::v1::ResourceSpans* _internal_add_resource_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ResourceSpans>& _internal_resource_spans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ResourceSpans>* _internal_mutable_resource_spans();
  public:
  const ::opentelemetry::proto::trace::v1::ResourceSpans& resource_spans(int index) const;
  ::opentelemetry::proto::trace::v1::ResourceSpans* add_resource_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ResourceSpans >&
      resource_spans() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.TracesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ResourceSpans > resource_spans_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class ResourceSpans final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.ResourceSpans) */ {
 public:
  inline ResourceSpans() : ResourceSpans(nullptr) {}
  ~ResourceSpans() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceSpans(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceSpans(const ResourceSpans& from);
  ResourceSpans(ResourceSpans&& from) noexcept
    : ResourceSpans() {
    *this = ::std::move(from);
  }

  inline ResourceSpans& operator=(const ResourceSpans& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceSpans& operator=(ResourceSpans&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceSpans& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceSpans* internal_default_instance() {
    return reinterpret_cast<const ResourceSpans*>(
               &_ResourceSpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceSpans& a, ResourceSpans& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceSpans* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceSpans* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceSpans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceSpans>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceSpans& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceSpans& from) {
    ResourceSpans::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceSpans* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.ResourceSpans";
  }
  protected:
  explicit ResourceSpans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeSpansFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
  int scope_spans_size() const;
  private:
  int _internal_scope_spans_size() const;

  public:
  void clear_scope_spans() ;
  ::opentelemetry::proto::trace::v1::ScopeSpans* mutable_scope_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ScopeSpans >*
      mutable_scope_spans();
  private:
  const ::opentelemetry::proto::trace::v1::ScopeSpans& _internal_scope_spans(int index) const;
  ::opentelemetry::proto::trace::v1::ScopeSpans* _internal_add_scope_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ScopeSpans>& _internal_scope_spans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ScopeSpans>* _internal_mutable_scope_spans();
  public:
  const ::opentelemetry::proto::trace::v1::ScopeSpans& scope_spans(int index) const;
  ::opentelemetry::proto::trace::v1::ScopeSpans* add_scope_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ScopeSpans >&
      scope_spans() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* ptr);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.ResourceSpans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ScopeSpans > scope_spans_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class ScopeSpans final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.ScopeSpans) */ {
 public:
  inline ScopeSpans() : ScopeSpans(nullptr) {}
  ~ScopeSpans() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ScopeSpans(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScopeSpans(const ScopeSpans& from);
  ScopeSpans(ScopeSpans&& from) noexcept
    : ScopeSpans() {
    *this = ::std::move(from);
  }

  inline ScopeSpans& operator=(const ScopeSpans& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeSpans& operator=(ScopeSpans&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeSpans& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeSpans* internal_default_instance() {
    return reinterpret_cast<const ScopeSpans*>(
               &_ScopeSpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScopeSpans& a, ScopeSpans& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeSpans* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeSpans* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeSpans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScopeSpans>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScopeSpans& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScopeSpans& from) {
    ScopeSpans::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeSpans* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.ScopeSpans";
  }
  protected:
  explicit ScopeSpans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
  int spans_size() const;
  private:
  int _internal_spans_size() const;

  public:
  void clear_spans() ;
  ::opentelemetry::proto::trace::v1::Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >*
      mutable_spans();
  private:
  const ::opentelemetry::proto::trace::v1::Span& _internal_spans(int index) const;
  ::opentelemetry::proto::trace::v1::Span* _internal_add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span>& _internal_spans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span>* _internal_mutable_spans();
  public:
  const ::opentelemetry::proto::trace::v1::Span& spans(int index) const;
  ::opentelemetry::proto::trace::v1::Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >&
      spans() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* ptr);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();
  public:
  void unsafe_arena_set_allocated_scope(
      ::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.ScopeSpans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span > spans_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class Span_Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span.Event) */ {
 public:
  inline Span_Event() : Span_Event(nullptr) {}
  ~Span_Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Span_Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_Event(const Span_Event& from);
  Span_Event(Span_Event&& from) noexcept
    : Span_Event() {
    *this = ::std::move(from);
  }

  inline Span_Event& operator=(const Span_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Event& operator=(Span_Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Span_Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_Event* internal_default_instance() {
    return reinterpret_cast<const Span_Event*>(
               &_Span_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Span_Event& a, Span_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Span_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Span_Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Span_Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Span_Event& from) {
    Span_Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span.Event";
  }
  protected:
  explicit Span_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 3,
    kNameFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 1,
    kDroppedAttributesCountFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // fixed64 time_unix_nano = 1;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // uint32 dropped_attributes_count = 4;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t time_unix_nano_;
    ::uint32_t dropped_attributes_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class Span_Link final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span.Link) */ {
 public:
  inline Span_Link() : Span_Link(nullptr) {}
  ~Span_Link() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Span_Link(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span_Link(const Span_Link& from);
  Span_Link(Span_Link&& from) noexcept
    : Span_Link() {
    *this = ::std::move(from);
  }

  inline Span_Link& operator=(const Span_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Link& operator=(Span_Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Span_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span_Link* internal_default_instance() {
    return reinterpret_cast<const Span_Link*>(
               &_Span_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Span_Link& a, Span_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Link* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Link* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Span_Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Span_Link>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Span_Link& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Span_Link& from) {
    Span_Link::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Link* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span.Link";
  }
  protected:
  explicit Span_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kTraceStateFieldNumber = 3,
    kDroppedAttributesCountFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;
  // bytes trace_id = 1;
  void clear_trace_id() ;
  const std::string& trace_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* ptr);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // bytes span_id = 2;
  void clear_span_id() ;
  const std::string& span_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* ptr);

  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(
      const std::string& value);
  std::string* _internal_mutable_span_id();

  public:
  // string trace_state = 3;
  void clear_trace_state() ;
  const std::string& trace_state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_state(Arg_&& arg, Args_... args);
  std::string* mutable_trace_state();
  PROTOBUF_NODISCARD std::string* release_trace_state();
  void set_allocated_trace_state(std::string* ptr);

  private:
  const std::string& _internal_trace_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_state(
      const std::string& value);
  std::string* _internal_mutable_trace_state();

  public:
  // uint32 dropped_attributes_count = 5;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_state_;
    ::uint32_t dropped_attributes_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class Span final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span) */ {
 public:
  inline Span() : Span(nullptr) {}
  ~Span() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Span(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Span(const Span& from);
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span& operator=(Span&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Span& default_instance() {
    return *internal_default_instance();
  }
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }
  inline void Swap(Span* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Span& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Span& from) {
    Span::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span";
  }
  protected:
  explicit Span(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Span_Event Event;
  typedef Span_Link Link;

  using SpanKind = Span_SpanKind;
  static constexpr SpanKind SPAN_KIND_UNSPECIFIED = Span_SpanKind_SPAN_KIND_UNSPECIFIED;
  static constexpr SpanKind SPAN_KIND_INTERNAL = Span_SpanKind_SPAN_KIND_INTERNAL;
  static constexpr SpanKind SPAN_KIND_SERVER = Span_SpanKind_SPAN_KIND_SERVER;
  static constexpr SpanKind SPAN_KIND_CLIENT = Span_SpanKind_SPAN_KIND_CLIENT;
  static constexpr SpanKind SPAN_KIND_PRODUCER = Span_SpanKind_SPAN_KIND_PRODUCER;
  static constexpr SpanKind SPAN_KIND_CONSUMER = Span_SpanKind_SPAN_KIND_CONSUMER;
  static inline bool SpanKind_IsValid(int value) {
    return Span_SpanKind_IsValid(value);
  }
  static constexpr SpanKind SpanKind_MIN = Span_SpanKind_SpanKind_MIN;
  static constexpr SpanKind SpanKind_MAX = Span_SpanKind_SpanKind_MAX;
  static constexpr int SpanKind_ARRAYSIZE = Span_SpanKind_SpanKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanKind_descriptor() {
    return Span_SpanKind_descriptor();
  }
  template <typename T>
  static inline const std::string& SpanKind_Name(T value) {
    return Span_SpanKind_Name(value);
  }
  static inline bool SpanKind_Parse(absl::string_view name, SpanKind* value) {
    return Span_SpanKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 9,
    kEventsFieldNumber = 11,
    kLinksFieldNumber = 13,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kTraceStateFieldNumber = 3,
    kParentSpanIdFieldNumber = 4,
    kNameFieldNumber = 5,
    kStatusFieldNumber = 15,
    kStartTimeUnixNanoFieldNumber = 7,
    kEndTimeUnixNanoFieldNumber = 8,
    kKindFieldNumber = 6,
    kDroppedAttributesCountFieldNumber = 10,
    kDroppedEventsCountFieldNumber = 12,
    kDroppedLinksCountFieldNumber = 14,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;
  // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::opentelemetry::proto::trace::v1::Span_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >*
      mutable_events();
  private:
  const ::opentelemetry::proto::trace::v1::Span_Event& _internal_events(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Event>* _internal_mutable_events();
  public:
  const ::opentelemetry::proto::trace::v1::Span_Event& events(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >&
      events() const;
  // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
  int links_size() const;
  private:
  int _internal_links_size() const;

  public:
  void clear_links() ;
  ::opentelemetry::proto::trace::v1::Span_Link* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >*
      mutable_links();
  private:
  const ::opentelemetry::proto::trace::v1::Span_Link& _internal_links(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Link* _internal_add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Link>& _internal_links() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Link>* _internal_mutable_links();
  public:
  const ::opentelemetry::proto::trace::v1::Span_Link& links(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Link* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >&
      links() const;
  // bytes trace_id = 1;
  void clear_trace_id() ;
  const std::string& trace_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* ptr);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // bytes span_id = 2;
  void clear_span_id() ;
  const std::string& span_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* ptr);

  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(
      const std::string& value);
  std::string* _internal_mutable_span_id();

  public:
  // string trace_state = 3;
  void clear_trace_state() ;
  const std::string& trace_state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_state(Arg_&& arg, Args_... args);
  std::string* mutable_trace_state();
  PROTOBUF_NODISCARD std::string* release_trace_state();
  void set_allocated_trace_state(std::string* ptr);

  private:
  const std::string& _internal_trace_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_state(
      const std::string& value);
  std::string* _internal_mutable_trace_state();

  public:
  // bytes parent_span_id = 4;
  void clear_parent_span_id() ;
  const std::string& parent_span_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_parent_span_id();
  PROTOBUF_NODISCARD std::string* release_parent_span_id();
  void set_allocated_parent_span_id(std::string* ptr);

  private:
  const std::string& _internal_parent_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_span_id(
      const std::string& value);
  std::string* _internal_mutable_parent_span_id();

  public:
  // string name = 5;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .opentelemetry.proto.trace.v1.Status status = 15;
  bool has_status() const;
  void clear_status() ;
  const ::opentelemetry::proto::trace::v1::Status& status() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::trace::v1::Status* release_status();
  ::opentelemetry::proto::trace::v1::Status* mutable_status();
  void set_allocated_status(::opentelemetry::proto::trace::v1::Status* status);
  private:
  const ::opentelemetry::proto::trace::v1::Status& _internal_status() const;
  ::opentelemetry::proto::trace::v1::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opentelemetry::proto::trace::v1::Status* status);
  ::opentelemetry::proto::trace::v1::Status* unsafe_arena_release_status();
  // fixed64 start_time_unix_nano = 7;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 end_time_unix_nano = 8;
  void clear_end_time_unix_nano() ;
  ::uint64_t end_time_unix_nano() const;
  void set_end_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_end_time_unix_nano() const;
  void _internal_set_end_time_unix_nano(::uint64_t value);

  public:
  // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  void clear_kind() ;
  ::opentelemetry::proto::trace::v1::Span_SpanKind kind() const;
  void set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value);

  private:
  ::opentelemetry::proto::trace::v1::Span_SpanKind _internal_kind() const;
  void _internal_set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value);

  public:
  // uint32 dropped_attributes_count = 10;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // uint32 dropped_events_count = 12;
  void clear_dropped_events_count() ;
  ::uint32_t dropped_events_count() const;
  void set_dropped_events_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_events_count() const;
  void _internal_set_dropped_events_count(::uint32_t value);

  public:
  // uint32 dropped_links_count = 14;
  void clear_dropped_links_count() ;
  ::uint32_t dropped_links_count() const;
  void set_dropped_links_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_links_count() const;
  void _internal_set_dropped_links_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event > events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link > links_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_span_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::opentelemetry::proto::trace::v1::Status* status_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t end_time_unix_nano_;
    int kind_;
    ::uint32_t dropped_attributes_count_;
    ::uint32_t dropped_events_count_;
    ::uint32_t dropped_links_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.trace.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StatusCode = Status_StatusCode;
  static constexpr StatusCode STATUS_CODE_UNSET = Status_StatusCode_STATUS_CODE_UNSET;
  static constexpr StatusCode STATUS_CODE_OK = Status_StatusCode_STATUS_CODE_OK;
  static constexpr StatusCode STATUS_CODE_ERROR = Status_StatusCode_STATUS_CODE_ERROR;
  static inline bool StatusCode_IsValid(int value) {
    return Status_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN = Status_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX = Status_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE = Status_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
    return Status_StatusCode_descriptor();
  }
  template <typename T>
  static inline const std::string& StatusCode_Name(T value) {
    return Status_StatusCode_Name(value);
  }
  static inline bool StatusCode_Parse(absl::string_view name, StatusCode* value) {
    return Status_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
  void clear_code() ;
  ::opentelemetry::proto::trace::v1::Status_StatusCode code() const;
  void set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value);

  private:
  ::opentelemetry::proto::trace::v1::Status_StatusCode _internal_code() const;
  void _internal_set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TracesData

// repeated .opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
inline int TracesData::_internal_resource_spans_size() const {
  return _impl_.resource_spans_.size();
}
inline int TracesData::resource_spans_size() const {
  return _internal_resource_spans_size();
}
inline void TracesData::clear_resource_spans() {
  _internal_mutable_resource_spans()->Clear();
}
inline ::opentelemetry::proto::trace::v1::ResourceSpans* TracesData::mutable_resource_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.TracesData.resource_spans)
  return _internal_mutable_resource_spans()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ResourceSpans >*
TracesData::mutable_resource_spans() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.TracesData.resource_spans)
  return _internal_mutable_resource_spans();
}
inline const ::opentelemetry::proto::trace::v1::ResourceSpans& TracesData::_internal_resource_spans(int index) const {
  return _internal_resource_spans().Get(index);
}
inline const ::opentelemetry::proto::trace::v1::ResourceSpans& TracesData::resource_spans(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TracesData.resource_spans)
  return _internal_resource_spans(index);
}
inline ::opentelemetry::proto::trace::v1::ResourceSpans* TracesData::_internal_add_resource_spans() {
  return _internal_mutable_resource_spans()->Add();
}
inline ::opentelemetry::proto::trace::v1::ResourceSpans* TracesData::add_resource_spans() {
  ::opentelemetry::proto::trace::v1::ResourceSpans* _add = _internal_add_resource_spans();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.TracesData.resource_spans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ResourceSpans >&
TracesData::resource_spans() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.TracesData.resource_spans)
  return _internal_resource_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ResourceSpans>&
TracesData::_internal_resource_spans() const {
  return _impl_.resource_spans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ResourceSpans>*
TracesData::_internal_mutable_resource_spans() {
  return &_impl_.resource_spans_;
}

// -------------------------------------------------------------------

// ResourceSpans

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceSpans::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceSpans::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(
      ::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceSpans::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  return _internal_resource();
}
inline void ResourceSpans::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.ResourceSpans.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::mutable_resource() {
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  return _msg;
}
inline void ResourceSpans::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource));
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.ResourceSpans.resource)
}

// repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2;
inline int ResourceSpans::_internal_scope_spans_size() const {
  return _impl_.scope_spans_.size();
}
inline int ResourceSpans::scope_spans_size() const {
  return _internal_scope_spans_size();
}
inline void ResourceSpans::clear_scope_spans() {
  _internal_mutable_scope_spans()->Clear();
}
inline ::opentelemetry::proto::trace::v1::ScopeSpans* ResourceSpans::mutable_scope_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ResourceSpans.scope_spans)
  return _internal_mutable_scope_spans()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ScopeSpans >*
ResourceSpans::mutable_scope_spans() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.ResourceSpans.scope_spans)
  return _internal_mutable_scope_spans();
}
inline const ::opentelemetry::proto::trace::v1::ScopeSpans& ResourceSpans::_internal_scope_spans(int index) const {
  return _internal_scope_spans().Get(index);
}
inline const ::opentelemetry::proto::trace::v1::ScopeSpans& ResourceSpans::scope_spans(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ResourceSpans.scope_spans)
  return _internal_scope_spans(index);
}
inline ::opentelemetry::proto::trace::v1::ScopeSpans* ResourceSpans::_internal_add_scope_spans() {
  return _internal_mutable_scope_spans()->Add();
}
inline ::opentelemetry::proto::trace::v1::ScopeSpans* ResourceSpans::add_scope_spans() {
  ::opentelemetry::proto::trace::v1::ScopeSpans* _add = _internal_add_scope_spans();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.ResourceSpans.scope_spans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::ScopeSpans >&
ResourceSpans::scope_spans() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.ResourceSpans.scope_spans)
  return _internal_scope_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ScopeSpans>&
ResourceSpans::_internal_scope_spans() const {
  return _impl_.scope_spans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::ScopeSpans>*
ResourceSpans::_internal_mutable_scope_spans() {
  return &_impl_.scope_spans_;
}

// string schema_url = 3;
inline void ResourceSpans::clear_schema_url() {
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceSpans::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ResourceSpans.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceSpans::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.ResourceSpans.schema_url)
}
inline std::string* ResourceSpans::mutable_schema_url() {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ResourceSpans.schema_url)
  return _s;
}
inline const std::string& ResourceSpans::_internal_schema_url() const {
  return _impl_.schema_url_.Get();
}
inline void ResourceSpans::_internal_set_schema_url(const std::string& value) {
  ;


  _impl_.schema_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceSpans::_internal_mutable_schema_url() {
  ;
  return _impl_.schema_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ResourceSpans::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.ResourceSpans.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceSpans::set_allocated_schema_url(std::string* value) {
  _impl_.schema_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.ResourceSpans.schema_url)
}

// -------------------------------------------------------------------

// ScopeSpans

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeSpans::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeSpans::_internal_scope() const {
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(
      ::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeSpans::scope() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ScopeSpans.scope)
  return _internal_scope();
}
inline void ScopeSpans::unsafe_arena_set_allocated_scope(
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = scope;
  if (scope) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.ScopeSpans.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeSpans::release_scope() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeSpans::unsafe_arena_release_scope() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.ScopeSpans.scope)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeSpans::_internal_mutable_scope() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArenaForAllocation());
    _impl_.scope_ = p;
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeSpans::mutable_scope() {
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ScopeSpans.scope)
  return _msg;
}
inline void ScopeSpans::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scope_);
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scope));
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.ScopeSpans.scope)
}

// repeated .opentelemetry.proto.trace.v1.Span spans = 2;
inline int ScopeSpans::_internal_spans_size() const {
  return _impl_.spans_.size();
}
inline int ScopeSpans::spans_size() const {
  return _internal_spans_size();
}
inline void ScopeSpans::clear_spans() {
  _internal_mutable_spans()->Clear();
}
inline ::opentelemetry::proto::trace::v1::Span* ScopeSpans::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ScopeSpans.spans)
  return _internal_mutable_spans()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >*
ScopeSpans::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.ScopeSpans.spans)
  return _internal_mutable_spans();
}
inline const ::opentelemetry::proto::trace::v1::Span& ScopeSpans::_internal_spans(int index) const {
  return _internal_spans().Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span& ScopeSpans::spans(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ScopeSpans.spans)
  return _internal_spans(index);
}
inline ::opentelemetry::proto::trace::v1::Span* ScopeSpans::_internal_add_spans() {
  return _internal_mutable_spans()->Add();
}
inline ::opentelemetry::proto::trace::v1::Span* ScopeSpans::add_spans() {
  ::opentelemetry::proto::trace::v1::Span* _add = _internal_add_spans();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.ScopeSpans.spans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >&
ScopeSpans::spans() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.ScopeSpans.spans)
  return _internal_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span>&
ScopeSpans::_internal_spans() const {
  return _impl_.spans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span>*
ScopeSpans::_internal_mutable_spans() {
  return &_impl_.spans_;
}

// string schema_url = 3;
inline void ScopeSpans::clear_schema_url() {
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeSpans::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ScopeSpans.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScopeSpans::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.ScopeSpans.schema_url)
}
inline std::string* ScopeSpans::mutable_schema_url() {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ScopeSpans.schema_url)
  return _s;
}
inline const std::string& ScopeSpans::_internal_schema_url() const {
  return _impl_.schema_url_.Get();
}
inline void ScopeSpans::_internal_set_schema_url(const std::string& value) {
  ;


  _impl_.schema_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ScopeSpans::_internal_mutable_schema_url() {
  ;
  return _impl_.schema_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ScopeSpans::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.ScopeSpans.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeSpans::set_allocated_schema_url(std::string* value) {
  _impl_.schema_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.ScopeSpans.schema_url)
}

// -------------------------------------------------------------------

// Span_Event

// fixed64 time_unix_nano = 1;
inline void Span_Event::clear_time_unix_nano() {
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t Span_Event::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void Span_Event::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.time_unix_nano)
}
inline ::uint64_t Span_Event::_internal_time_unix_nano() const {
  return _impl_.time_unix_nano_;
}
inline void Span_Event::_internal_set_time_unix_nano(::uint64_t value) {
  ;
  _impl_.time_unix_nano_ = value;
}

// string name = 2;
inline void Span_Event::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Span_Event::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span_Event::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.name)
}
inline std::string* Span_Event::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Event.name)
  return _s;
}
inline const std::string& Span_Event::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Span_Event::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Span_Event::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Span_Event::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Event.name)
  return _impl_.name_.Release();
}
inline void Span_Event::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Event.name)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
inline int Span_Event::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int Span_Event::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span_Event::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Event::_internal_attributes(int index) const {
  return _internal_attributes().Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Event::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::_internal_add_attributes() {
  return _internal_mutable_attributes()->Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::add_attributes() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span_Event::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Span_Event::_internal_attributes() const {
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Span_Event::_internal_mutable_attributes() {
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 4;
inline void Span_Event::clear_dropped_attributes_count() {
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t Span_Event::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span_Event::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.dropped_attributes_count)
}
inline ::uint32_t Span_Event::_internal_dropped_attributes_count() const {
  return _impl_.dropped_attributes_count_;
}
inline void Span_Event::_internal_set_dropped_attributes_count(::uint32_t value) {
  ;
  _impl_.dropped_attributes_count_ = value;
}

// -------------------------------------------------------------------

// Span_Link

// bytes trace_id = 1;
inline void Span_Link::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& Span_Link::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span_Link::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}
inline std::string* Span_Link::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return _s;
}
inline const std::string& Span_Link::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void Span_Link::_internal_set_trace_id(const std::string& value) {
  ;


  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Span_Link::_internal_mutable_trace_id() {
  ;
  return _impl_.trace_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Span_Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return _impl_.trace_id_.Release();
}
inline void Span_Link::set_allocated_trace_id(std::string* value) {
  _impl_.trace_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}

// bytes span_id = 2;
inline void Span_Link::clear_span_id() {
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& Span_Link::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return _internal_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span_Link::set_span_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.span_id)
}
inline std::string* Span_Link::mutable_span_id() {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return _s;
}
inline const std::string& Span_Link::_internal_span_id() const {
  return _impl_.span_id_.Get();
}
inline void Span_Link::_internal_set_span_id(const std::string& value) {
  ;


  _impl_.span_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Span_Link::_internal_mutable_span_id() {
  ;
  return _impl_.span_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Span_Link::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return _impl_.span_id_.Release();
}
inline void Span_Link::set_allocated_span_id(std::string* value) {
  _impl_.span_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_id_.IsDefault()) {
          _impl_.span_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.span_id)
}

// string trace_state = 3;
inline void Span_Link::clear_trace_state() {
  _impl_.trace_state_.ClearToEmpty();
}
inline const std::string& Span_Link::trace_state() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return _internal_trace_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span_Link::set_trace_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}
inline std::string* Span_Link::mutable_trace_state() {
  std::string* _s = _internal_mutable_trace_state();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return _s;
}
inline const std::string& Span_Link::_internal_trace_state() const {
  return _impl_.trace_state_.Get();
}
inline void Span_Link::_internal_set_trace_state(const std::string& value) {
  ;


  _impl_.trace_state_.Set(value, GetArenaForAllocation());
}
inline std::string* Span_Link::_internal_mutable_trace_state() {
  ;
  return _impl_.trace_state_.Mutable( GetArenaForAllocation());
}
inline std::string* Span_Link::release_trace_state() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return _impl_.trace_state_.Release();
}
inline void Span_Link::set_allocated_trace_state(std::string* value) {
  _impl_.trace_state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_state_.IsDefault()) {
          _impl_.trace_state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
inline int Span_Link::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int Span_Link::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span_Link::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Link::_internal_attributes(int index) const {
  return _internal_attributes().Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Link::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::_internal_add_attributes() {
  return _internal_mutable_attributes()->Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::add_attributes() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span_Link::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Span_Link::_internal_attributes() const {
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Span_Link::_internal_mutable_attributes() {
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 5;
inline void Span_Link::clear_dropped_attributes_count() {
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t Span_Link::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span_Link::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.dropped_attributes_count)
}
inline ::uint32_t Span_Link::_internal_dropped_attributes_count() const {
  return _impl_.dropped_attributes_count_;
}
inline void Span_Link::_internal_set_dropped_attributes_count(::uint32_t value) {
  ;
  _impl_.dropped_attributes_count_ = value;
}

// -------------------------------------------------------------------

// Span

// bytes trace_id = 1;
inline void Span::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& Span::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.trace_id)
}
inline std::string* Span::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.trace_id)
  return _s;
}
inline const std::string& Span::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void Span::_internal_set_trace_id(const std::string& value) {
  ;


  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Span::_internal_mutable_trace_id() {
  ;
  return _impl_.trace_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Span::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.trace_id)
  return _impl_.trace_id_.Release();
}
inline void Span::set_allocated_trace_id(std::string* value) {
  _impl_.trace_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.trace_id)
}

// bytes span_id = 2;
inline void Span::clear_span_id() {
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& Span::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.span_id)
  return _internal_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span::set_span_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.span_id)
}
inline std::string* Span::mutable_span_id() {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.span_id)
  return _s;
}
inline const std::string& Span::_internal_span_id() const {
  return _impl_.span_id_.Get();
}
inline void Span::_internal_set_span_id(const std::string& value) {
  ;


  _impl_.span_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Span::_internal_mutable_span_id() {
  ;
  return _impl_.span_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Span::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.span_id)
  return _impl_.span_id_.Release();
}
inline void Span::set_allocated_span_id(std::string* value) {
  _impl_.span_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_id_.IsDefault()) {
          _impl_.span_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.span_id)
}

// string trace_state = 3;
inline void Span::clear_trace_state() {
  _impl_.trace_state_.ClearToEmpty();
}
inline const std::string& Span::trace_state() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.trace_state)
  return _internal_trace_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span::set_trace_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.trace_state)
}
inline std::string* Span::mutable_trace_state() {
  std::string* _s = _internal_mutable_trace_state();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.trace_state)
  return _s;
}
inline const std::string& Span::_internal_trace_state() const {
  return _impl_.trace_state_.Get();
}
inline void Span::_internal_set_trace_state(const std::string& value) {
  ;


  _impl_.trace_state_.Set(value, GetArenaForAllocation());
}
inline std::string* Span::_internal_mutable_trace_state() {
  ;
  return _impl_.trace_state_.Mutable( GetArenaForAllocation());
}
inline std::string* Span::release_trace_state() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.trace_state)
  return _impl_.trace_state_.Release();
}
inline void Span::set_allocated_trace_state(std::string* value) {
  _impl_.trace_state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_state_.IsDefault()) {
          _impl_.trace_state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.trace_state)
}

// bytes parent_span_id = 4;
inline void Span::clear_parent_span_id() {
  _impl_.parent_span_id_.ClearToEmpty();
}
inline const std::string& Span::parent_span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return _internal_parent_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span::set_parent_span_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.parent_span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.parent_span_id)
}
inline std::string* Span::mutable_parent_span_id() {
  std::string* _s = _internal_mutable_parent_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return _s;
}
inline const std::string& Span::_internal_parent_span_id() const {
  return _impl_.parent_span_id_.Get();
}
inline void Span::_internal_set_parent_span_id(const std::string& value) {
  ;


  _impl_.parent_span_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Span::_internal_mutable_parent_span_id() {
  ;
  return _impl_.parent_span_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Span::release_parent_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return _impl_.parent_span_id_.Release();
}
inline void Span::set_allocated_parent_span_id(std::string* value) {
  _impl_.parent_span_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_span_id_.IsDefault()) {
          _impl_.parent_span_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.parent_span_id)
}

// string name = 5;
inline void Span::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Span::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.name)
}
inline std::string* Span::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.name)
  return _s;
}
inline const std::string& Span::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Span::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Span::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.name)
  return _impl_.name_.Release();
}
inline void Span::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.name)
}

// .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
inline void Span::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::opentelemetry::proto::trace::v1::Span_SpanKind Span::kind() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.kind)
  return _internal_kind();
}
inline void Span::set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value) {
   _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.kind)
}
inline ::opentelemetry::proto::trace::v1::Span_SpanKind Span::_internal_kind() const {
  return static_cast<::opentelemetry::proto::trace::v1::Span_SpanKind>(_impl_.kind_);
}
inline void Span::_internal_set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value) {
  ;
  _impl_.kind_ = value;
}

// fixed64 start_time_unix_nano = 7;
inline void Span::clear_start_time_unix_nano() {
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t Span::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void Span::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.start_time_unix_nano)
}
inline ::uint64_t Span::_internal_start_time_unix_nano() const {
  return _impl_.start_time_unix_nano_;
}
inline void Span::_internal_set_start_time_unix_nano(::uint64_t value) {
  ;
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 end_time_unix_nano = 8;
inline void Span::clear_end_time_unix_nano() {
  _impl_.end_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t Span::end_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.end_time_unix_nano)
  return _internal_end_time_unix_nano();
}
inline void Span::set_end_time_unix_nano(::uint64_t value) {
  _internal_set_end_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.end_time_unix_nano)
}
inline ::uint64_t Span::_internal_end_time_unix_nano() const {
  return _impl_.end_time_unix_nano_;
}
inline void Span::_internal_set_end_time_unix_nano(::uint64_t value) {
  ;
  _impl_.end_time_unix_nano_ = value;
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
inline int Span::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int Span::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span::_internal_attributes(int index) const {
  return _internal_attributes().Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::_internal_add_attributes() {
  return _internal_mutable_attributes()->Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::add_attributes() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Span::_internal_attributes() const {
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Span::_internal_mutable_attributes() {
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 10;
inline void Span::clear_dropped_attributes_count() {
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t Span::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_attributes_count)
}
inline ::uint32_t Span::_internal_dropped_attributes_count() const {
  return _impl_.dropped_attributes_count_;
}
inline void Span::_internal_set_dropped_attributes_count(::uint32_t value) {
  ;
  _impl_.dropped_attributes_count_ = value;
}

// repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
inline int Span::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int Span::events_size() const {
  return _internal_events_size();
}
inline void Span::clear_events() {
  _internal_mutable_events()->Clear();
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >*
Span::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.events)
  return _internal_mutable_events();
}
inline const ::opentelemetry::proto::trace::v1::Span_Event& Span::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span_Event& Span::events(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.events)
  return _internal_events(index);
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::add_events() {
  ::opentelemetry::proto::trace::v1::Span_Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >&
Span::events() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Event>&
Span::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Event>*
Span::_internal_mutable_events() {
  return &_impl_.events_;
}

// uint32 dropped_events_count = 12;
inline void Span::clear_dropped_events_count() {
  _impl_.dropped_events_count_ = 0u;
}
inline ::uint32_t Span::dropped_events_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_events_count)
  return _internal_dropped_events_count();
}
inline void Span::set_dropped_events_count(::uint32_t value) {
  _internal_set_dropped_events_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_events_count)
}
inline ::uint32_t Span::_internal_dropped_events_count() const {
  return _impl_.dropped_events_count_;
}
inline void Span::_internal_set_dropped_events_count(::uint32_t value) {
  ;
  _impl_.dropped_events_count_ = value;
}

// repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
inline int Span::_internal_links_size() const {
  return _impl_.links_.size();
}
inline int Span::links_size() const {
  return _internal_links_size();
}
inline void Span::clear_links() {
  _internal_mutable_links()->Clear();
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.links)
  return _internal_mutable_links()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >*
Span::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.links)
  return _internal_mutable_links();
}
inline const ::opentelemetry::proto::trace::v1::Span_Link& Span::_internal_links(int index) const {
  return _internal_links().Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span_Link& Span::links(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.links)
  return _internal_links(index);
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::_internal_add_links() {
  return _internal_mutable_links()->Add();
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::add_links() {
  ::opentelemetry::proto::trace::v1::Span_Link* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >&
Span::links() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.links)
  return _internal_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Link>&
Span::_internal_links() const {
  return _impl_.links_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::trace::v1::Span_Link>*
Span::_internal_mutable_links() {
  return &_impl_.links_;
}

// uint32 dropped_links_count = 14;
inline void Span::clear_dropped_links_count() {
  _impl_.dropped_links_count_ = 0u;
}
inline ::uint32_t Span::dropped_links_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_links_count)
  return _internal_dropped_links_count();
}
inline void Span::set_dropped_links_count(::uint32_t value) {
  _internal_set_dropped_links_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_links_count)
}
inline ::uint32_t Span::_internal_dropped_links_count() const {
  return _impl_.dropped_links_count_;
}
inline void Span::_internal_set_dropped_links_count(::uint32_t value) {
  ;
  _impl_.dropped_links_count_ = value;
}

// .opentelemetry.proto.trace.v1.Status status = 15;
inline bool Span::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void Span::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opentelemetry::proto::trace::v1::Status& Span::_internal_status() const {
  const ::opentelemetry::proto::trace::v1::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::trace::v1::Status&>(
      ::opentelemetry::proto::trace::v1::_Status_default_instance_);
}
inline const ::opentelemetry::proto::trace::v1::Status& Span::status() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.status)
  return _internal_status();
}
inline void Span::unsafe_arena_set_allocated_status(
    ::opentelemetry::proto::trace::v1::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.Span.status)
}
inline ::opentelemetry::proto::trace::v1::Status* Span::release_status() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::trace::v1::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.status)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::trace::v1::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::trace::v1::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::mutable_status() {
  ::opentelemetry::proto::trace::v1::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.status)
  return _msg;
}
inline void Span::set_allocated_status(::opentelemetry::proto::trace::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.status)
}

// -------------------------------------------------------------------

// Status

// string message = 2;
inline void Status::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Status.message)
}
inline std::string* Status::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Status.message)
  return _impl_.message_.Release();
}
inline void Status::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Status.message)
}

// .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
inline void Status::clear_code() {
  _impl_.code_ = 0;
}
inline ::opentelemetry::proto::trace::v1::Status_StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Status.code)
  return _internal_code();
}
inline void Status::set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value) {
   _internal_set_code(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Status.code)
}
inline ::opentelemetry::proto::trace::v1::Status_StatusCode Status::_internal_code() const {
  return static_cast<::opentelemetry::proto::trace::v1::Status_StatusCode>(_impl_.code_);
}
inline void Status::_internal_set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value) {
  ;
  _impl_.code_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::opentelemetry::proto::trace::v1::Span_SpanKind> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::trace::v1::Span_SpanKind>() {
  return ::opentelemetry::proto::trace::v1::Span_SpanKind_descriptor();
}
template <>
struct is_proto_enum<::opentelemetry::proto::trace::v1::Status_StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::trace::v1::Status_StatusCode>() {
  return ::opentelemetry::proto::trace::v1::Status_StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_2epb_2eh
