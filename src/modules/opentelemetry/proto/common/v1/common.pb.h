// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/common/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {
class AnyValue;
struct AnyValueDefaultTypeInternal;
extern AnyValueDefaultTypeInternal _AnyValue_default_instance_;
class ArrayValue;
struct ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class InstrumentationScope;
struct InstrumentationScopeDefaultTypeInternal;
extern InstrumentationScopeDefaultTypeInternal _InstrumentationScope_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class KeyValueList;
struct KeyValueListDefaultTypeInternal;
extern KeyValueListDefaultTypeInternal _KeyValueList_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template <>
::opentelemetry::proto::common::v1::AnyValue* Arena::CreateMaybeMessage<::opentelemetry::proto::common::v1::AnyValue>(Arena*);
template <>
::opentelemetry::proto::common::v1::ArrayValue* Arena::CreateMaybeMessage<::opentelemetry::proto::common::v1::ArrayValue>(Arena*);
template <>
::opentelemetry::proto::common::v1::InstrumentationScope* Arena::CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationScope>(Arena*);
template <>
::opentelemetry::proto::common::v1::KeyValue* Arena::CreateMaybeMessage<::opentelemetry::proto::common::v1::KeyValue>(Arena*);
template <>
::opentelemetry::proto::common::v1::KeyValueList* Arena::CreateMaybeMessage<::opentelemetry::proto::common::v1::KeyValueList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class AnyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.common.v1.AnyValue) */ {
 public:
  inline AnyValue() : AnyValue(nullptr) {}
  ~AnyValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AnyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyValue(const AnyValue& from);
  AnyValue(AnyValue&& from) noexcept
    : AnyValue() {
    *this = ::std::move(from);
  }

  inline AnyValue& operator=(const AnyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyValue& operator=(AnyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kBoolValue = 2,
    kIntValue = 3,
    kDoubleValue = 4,
    kArrayValue = 5,
    kKvlistValue = 6,
    kBytesValue = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const AnyValue* internal_default_instance() {
    return reinterpret_cast<const AnyValue*>(
               &_AnyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyValue& a, AnyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnyValue& from) {
    AnyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.common.v1.AnyValue";
  }
  protected:
  explicit AnyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kArrayValueFieldNumber = 5,
    kKvlistValueFieldNumber = 6,
    kBytesValueFieldNumber = 7,
  };
  // string string_value = 1;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // int64 int_value = 3;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // double double_value = 4;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;

  public:
  void clear_array_value() ;
  const ::opentelemetry::proto::common::v1::ArrayValue& array_value() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::ArrayValue* release_array_value();
  ::opentelemetry::proto::common::v1::ArrayValue* mutable_array_value();
  void set_allocated_array_value(::opentelemetry::proto::common::v1::ArrayValue* array_value);
  private:
  const ::opentelemetry::proto::common::v1::ArrayValue& _internal_array_value() const;
  ::opentelemetry::proto::common::v1::ArrayValue* _internal_mutable_array_value();
  public:
  void unsafe_arena_set_allocated_array_value(
      ::opentelemetry::proto::common::v1::ArrayValue* array_value);
  ::opentelemetry::proto::common::v1::ArrayValue* unsafe_arena_release_array_value();
  // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
  bool has_kvlist_value() const;
  private:
  bool _internal_has_kvlist_value() const;

  public:
  void clear_kvlist_value() ;
  const ::opentelemetry::proto::common::v1::KeyValueList& kvlist_value() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::KeyValueList* release_kvlist_value();
  ::opentelemetry::proto::common::v1::KeyValueList* mutable_kvlist_value();
  void set_allocated_kvlist_value(::opentelemetry::proto::common::v1::KeyValueList* kvlist_value);
  private:
  const ::opentelemetry::proto::common::v1::KeyValueList& _internal_kvlist_value() const;
  ::opentelemetry::proto::common::v1::KeyValueList* _internal_mutable_kvlist_value();
  public:
  void unsafe_arena_set_allocated_kvlist_value(
      ::opentelemetry::proto::common::v1::KeyValueList* kvlist_value);
  ::opentelemetry::proto::common::v1::KeyValueList* unsafe_arena_release_kvlist_value();
  // bytes bytes_value = 7;
  bool has_bytes_value() const;
  void clear_bytes_value() ;
  const std::string& bytes_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes_value(Arg_&& arg, Args_... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* ptr);

  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(
      const std::string& value);
  std::string* _internal_mutable_bytes_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.common.v1.AnyValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_array_value();
  void set_has_kvlist_value();
  void set_has_bytes_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::int64_t int_value_;
      double double_value_;
      ::opentelemetry::proto::common::v1::ArrayValue* array_value_;
      ::opentelemetry::proto::common::v1::KeyValueList* kvlist_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class ArrayValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.common.v1.ArrayValue) */ {
 public:
  inline ArrayValue() : ArrayValue(nullptr) {}
  ~ArrayValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ArrayValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayValue(const ArrayValue& from);
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayValue& from) {
    ArrayValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.common.v1.ArrayValue";
  }
  protected:
  explicit ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::opentelemetry::proto::common::v1::AnyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::AnyValue >*
      mutable_values();
  private:
  const ::opentelemetry::proto::common::v1::AnyValue& _internal_values(int index) const;
  ::opentelemetry::proto::common::v1::AnyValue* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::AnyValue>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::AnyValue>* _internal_mutable_values();
  public:
  const ::opentelemetry::proto::common::v1::AnyValue& values(int index) const;
  ::opentelemetry::proto::common::v1::AnyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::AnyValue >&
      values() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.common.v1.ArrayValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::AnyValue > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class KeyValueList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.common.v1.KeyValueList) */ {
 public:
  inline KeyValueList() : KeyValueList(nullptr) {}
  ~KeyValueList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValueList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValueList(const KeyValueList& from);
  KeyValueList(KeyValueList&& from) noexcept
    : KeyValueList() {
    *this = ::std::move(from);
  }

  inline KeyValueList& operator=(const KeyValueList& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValueList& operator=(KeyValueList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValueList& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValueList* internal_default_instance() {
    return reinterpret_cast<const KeyValueList*>(
               &_KeyValueList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyValueList& a, KeyValueList& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValueList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValueList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValueList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValueList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValueList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyValueList& from) {
    KeyValueList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValueList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.common.v1.KeyValueList";
  }
  protected:
  explicit KeyValueList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_values();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_values(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_values();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& values(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      values() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.common.v1.KeyValueList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class KeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.common.v1.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyValue& from) {
    KeyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.common.v1.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .opentelemetry.proto.common.v1.AnyValue value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::opentelemetry::proto::common::v1::AnyValue& value() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::AnyValue* release_value();
  ::opentelemetry::proto::common::v1::AnyValue* mutable_value();
  void set_allocated_value(::opentelemetry::proto::common::v1::AnyValue* value);
  private:
  const ::opentelemetry::proto::common::v1::AnyValue& _internal_value() const;
  ::opentelemetry::proto::common::v1::AnyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::opentelemetry::proto::common::v1::AnyValue* value);
  ::opentelemetry::proto::common::v1::AnyValue* unsafe_arena_release_value();
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.common.v1.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::opentelemetry::proto::common::v1::AnyValue* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class InstrumentationScope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.common.v1.InstrumentationScope) */ {
 public:
  inline InstrumentationScope() : InstrumentationScope(nullptr) {}
  ~InstrumentationScope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentationScope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentationScope(const InstrumentationScope& from);
  InstrumentationScope(InstrumentationScope&& from) noexcept
    : InstrumentationScope() {
    *this = ::std::move(from);
  }

  inline InstrumentationScope& operator=(const InstrumentationScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentationScope& operator=(InstrumentationScope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentationScope& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentationScope* internal_default_instance() {
    return reinterpret_cast<const InstrumentationScope*>(
               &_InstrumentationScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InstrumentationScope& a, InstrumentationScope& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentationScope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentationScope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentationScope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentationScope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstrumentationScope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstrumentationScope& from) {
    InstrumentationScope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentationScope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opentelemetry.proto.common.v1.InstrumentationScope";
  }
  protected:
  explicit InstrumentationScope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 3,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDroppedAttributesCountFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // uint32 dropped_attributes_count = 4;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.common.v1.InstrumentationScope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::uint32_t dropped_attributes_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AnyValue

// string string_value = 1;
inline bool AnyValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void AnyValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void AnyValue::clear_string_value() {
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AnyValue::string_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnyValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.AnyValue.string_value)
}
inline std::string* AnyValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.AnyValue.string_value)
  return _s;
}
inline const std::string& AnyValue::_internal_string_value() const {
  if (value_case() != kStringValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void AnyValue::_internal_set_string_value(const std::string& value) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }


  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* AnyValue::_internal_mutable_string_value() {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* AnyValue::release_string_value() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.AnyValue.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void AnyValue::set_allocated_string_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.string_value)
}

// bool bool_value = 2;
inline bool AnyValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void AnyValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void AnyValue::clear_bool_value() {
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool AnyValue::bool_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.bool_value)
  return _internal_bool_value();
}
inline void AnyValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.AnyValue.bool_value)
}
inline bool AnyValue::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void AnyValue::_internal_set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}

// int64 int_value = 3;
inline bool AnyValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void AnyValue::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void AnyValue::clear_int_value() {
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t AnyValue::int_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.int_value)
  return _internal_int_value();
}
inline void AnyValue::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.AnyValue.int_value)
}
inline ::int64_t AnyValue::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}
inline void AnyValue::_internal_set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}

// double double_value = 4;
inline bool AnyValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void AnyValue::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void AnyValue::clear_double_value() {
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double AnyValue::double_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.double_value)
  return _internal_double_value();
}
inline void AnyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.AnyValue.double_value)
}
inline double AnyValue::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void AnyValue::_internal_set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}

// .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
inline bool AnyValue::has_array_value() const {
  return value_case() == kArrayValue;
}
inline bool AnyValue::_internal_has_array_value() const {
  return value_case() == kArrayValue;
}
inline void AnyValue::set_has_array_value() {
  _impl_._oneof_case_[0] = kArrayValue;
}
inline void AnyValue::clear_array_value() {
  if (value_case() == kArrayValue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.array_value_;
    }
    clear_has_value();
  }
}
inline ::opentelemetry::proto::common::v1::ArrayValue* AnyValue::release_array_value() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.AnyValue.array_value)
  if (value_case() == kArrayValue) {
    clear_has_value();
    ::opentelemetry::proto::common::v1::ArrayValue* temp = _impl_.value_.array_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::common::v1::ArrayValue& AnyValue::_internal_array_value() const {
  return value_case() == kArrayValue
      ? *_impl_.value_.array_value_
      : reinterpret_cast<::opentelemetry::proto::common::v1::ArrayValue&>(::opentelemetry::proto::common::v1::_ArrayValue_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::ArrayValue& AnyValue::array_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.array_value)
  return _internal_array_value();
}
inline ::opentelemetry::proto::common::v1::ArrayValue* AnyValue::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.common.v1.AnyValue.array_value)
  if (value_case() == kArrayValue) {
    clear_has_value();
    ::opentelemetry::proto::common::v1::ArrayValue* temp = _impl_.value_.array_value_;
    _impl_.value_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_array_value(::opentelemetry::proto::common::v1::ArrayValue* array_value) {
  clear_value();
  if (array_value) {
    set_has_array_value();
    _impl_.value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.common.v1.AnyValue.array_value)
}
inline ::opentelemetry::proto::common::v1::ArrayValue* AnyValue::_internal_mutable_array_value() {
  if (value_case() != kArrayValue) {
    clear_value();
    set_has_array_value();
    _impl_.value_.array_value_ = CreateMaybeMessage< ::opentelemetry::proto::common::v1::ArrayValue >(GetArenaForAllocation());
  }
  return _impl_.value_.array_value_;
}
inline ::opentelemetry::proto::common::v1::ArrayValue* AnyValue::mutable_array_value() {
  ::opentelemetry::proto::common::v1::ArrayValue* _msg = _internal_mutable_array_value();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.AnyValue.array_value)
  return _msg;
}

// .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
inline bool AnyValue::has_kvlist_value() const {
  return value_case() == kKvlistValue;
}
inline bool AnyValue::_internal_has_kvlist_value() const {
  return value_case() == kKvlistValue;
}
inline void AnyValue::set_has_kvlist_value() {
  _impl_._oneof_case_[0] = kKvlistValue;
}
inline void AnyValue::clear_kvlist_value() {
  if (value_case() == kKvlistValue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.kvlist_value_;
    }
    clear_has_value();
  }
}
inline ::opentelemetry::proto::common::v1::KeyValueList* AnyValue::release_kvlist_value() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
  if (value_case() == kKvlistValue) {
    clear_has_value();
    ::opentelemetry::proto::common::v1::KeyValueList* temp = _impl_.value_.kvlist_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.kvlist_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::common::v1::KeyValueList& AnyValue::_internal_kvlist_value() const {
  return value_case() == kKvlistValue
      ? *_impl_.value_.kvlist_value_
      : reinterpret_cast<::opentelemetry::proto::common::v1::KeyValueList&>(::opentelemetry::proto::common::v1::_KeyValueList_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::KeyValueList& AnyValue::kvlist_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
  return _internal_kvlist_value();
}
inline ::opentelemetry::proto::common::v1::KeyValueList* AnyValue::unsafe_arena_release_kvlist_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
  if (value_case() == kKvlistValue) {
    clear_has_value();
    ::opentelemetry::proto::common::v1::KeyValueList* temp = _impl_.value_.kvlist_value_;
    _impl_.value_.kvlist_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_kvlist_value(::opentelemetry::proto::common::v1::KeyValueList* kvlist_value) {
  clear_value();
  if (kvlist_value) {
    set_has_kvlist_value();
    _impl_.value_.kvlist_value_ = kvlist_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
}
inline ::opentelemetry::proto::common::v1::KeyValueList* AnyValue::_internal_mutable_kvlist_value() {
  if (value_case() != kKvlistValue) {
    clear_value();
    set_has_kvlist_value();
    _impl_.value_.kvlist_value_ = CreateMaybeMessage< ::opentelemetry::proto::common::v1::KeyValueList >(GetArenaForAllocation());
  }
  return _impl_.value_.kvlist_value_;
}
inline ::opentelemetry::proto::common::v1::KeyValueList* AnyValue::mutable_kvlist_value() {
  ::opentelemetry::proto::common::v1::KeyValueList* _msg = _internal_mutable_kvlist_value();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
  return _msg;
}

// bytes bytes_value = 7;
inline bool AnyValue::has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline void AnyValue::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline void AnyValue::clear_bytes_value() {
  if (value_case() == kBytesValue) {
    _impl_.value_.bytes_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AnyValue::bytes_value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.AnyValue.bytes_value)
  return _internal_bytes_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnyValue::set_bytes_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kBytesValue) {
    clear_value();

    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  _impl_.value_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.AnyValue.bytes_value)
}
inline std::string* AnyValue::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.AnyValue.bytes_value)
  return _s;
}
inline const std::string& AnyValue::_internal_bytes_value() const {
  if (value_case() != kBytesValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.bytes_value_.Get();
}
inline void AnyValue::_internal_set_bytes_value(const std::string& value) {
  if (value_case() != kBytesValue) {
    clear_value();

    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }


  _impl_.value_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* AnyValue::_internal_mutable_bytes_value() {
  if (value_case() != kBytesValue) {
    clear_value();

    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  return _impl_.value_.bytes_value_.Mutable( GetArenaForAllocation());
}
inline std::string* AnyValue::release_bytes_value() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.AnyValue.bytes_value)
  if (value_case() != kBytesValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.bytes_value_.Release();
}
inline void AnyValue::set_allocated_bytes_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.bytes_value)
}

inline bool AnyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AnyValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AnyValue::ValueCase AnyValue::value_case() const {
  return AnyValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayValue

// repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
inline int ArrayValue::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ArrayValue::values_size() const {
  return _internal_values_size();
}
inline void ArrayValue::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::opentelemetry::proto::common::v1::AnyValue* ArrayValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.ArrayValue.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::AnyValue >*
ArrayValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.common.v1.ArrayValue.values)
  return _internal_mutable_values();
}
inline const ::opentelemetry::proto::common::v1::AnyValue& ArrayValue::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::opentelemetry::proto::common::v1::AnyValue& ArrayValue::values(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.ArrayValue.values)
  return _internal_values(index);
}
inline ::opentelemetry::proto::common::v1::AnyValue* ArrayValue::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::opentelemetry::proto::common::v1::AnyValue* ArrayValue::add_values() {
  ::opentelemetry::proto::common::v1::AnyValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.common.v1.ArrayValue.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::AnyValue >&
ArrayValue::values() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.common.v1.ArrayValue.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::AnyValue>&
ArrayValue::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::AnyValue>*
ArrayValue::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// KeyValueList

// repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
inline int KeyValueList::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int KeyValueList::values_size() const {
  return _internal_values_size();
}
inline void KeyValueList::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::opentelemetry::proto::common::v1::KeyValue* KeyValueList::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.KeyValueList.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
KeyValueList::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.common.v1.KeyValueList.values)
  return _internal_mutable_values();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& KeyValueList::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& KeyValueList::values(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.KeyValueList.values)
  return _internal_values(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* KeyValueList::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* KeyValueList::add_values() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.common.v1.KeyValueList.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
KeyValueList::values() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.common.v1.KeyValueList.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
KeyValueList::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
KeyValueList::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.KeyValue.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.KeyValue.key)
  return _s;
}
inline const std::string& KeyValue::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValue::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.KeyValue.key)
  return _impl_.key_.Release();
}
inline void KeyValue::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.KeyValue.key)
}

// .opentelemetry.proto.common.v1.AnyValue value = 2;
inline bool KeyValue::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void KeyValue::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opentelemetry::proto::common::v1::AnyValue& KeyValue::_internal_value() const {
  const ::opentelemetry::proto::common::v1::AnyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::AnyValue&>(
      ::opentelemetry::proto::common::v1::_AnyValue_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::AnyValue& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::unsafe_arena_set_allocated_value(
    ::opentelemetry::proto::common::v1::AnyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.common.v1.KeyValue.value)
}
inline ::opentelemetry::proto::common::v1::AnyValue* KeyValue::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::AnyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::common::v1::AnyValue* KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.KeyValue.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::AnyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::AnyValue* KeyValue::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::AnyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::opentelemetry::proto::common::v1::AnyValue* KeyValue::mutable_value() {
  ::opentelemetry::proto::common::v1::AnyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.KeyValue.value)
  return _msg;
}
inline void KeyValue::set_allocated_value(::opentelemetry::proto::common::v1::AnyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.KeyValue.value)
}

// -------------------------------------------------------------------

// InstrumentationScope

// string name = 1;
inline void InstrumentationScope::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& InstrumentationScope::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.InstrumentationScope.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentationScope::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.InstrumentationScope.name)
}
inline std::string* InstrumentationScope::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.InstrumentationScope.name)
  return _s;
}
inline const std::string& InstrumentationScope::_internal_name() const {
  return _impl_.name_.Get();
}
inline void InstrumentationScope::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* InstrumentationScope::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* InstrumentationScope::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.InstrumentationScope.name)
  return _impl_.name_.Release();
}
inline void InstrumentationScope::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.InstrumentationScope.name)
}

// string version = 2;
inline void InstrumentationScope::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& InstrumentationScope::version() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.InstrumentationScope.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentationScope::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.InstrumentationScope.version)
}
inline std::string* InstrumentationScope::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.InstrumentationScope.version)
  return _s;
}
inline const std::string& InstrumentationScope::_internal_version() const {
  return _impl_.version_.Get();
}
inline void InstrumentationScope::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* InstrumentationScope::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* InstrumentationScope::release_version() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.common.v1.InstrumentationScope.version)
  return _impl_.version_.Release();
}
inline void InstrumentationScope::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.InstrumentationScope.version)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
inline int InstrumentationScope::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int InstrumentationScope::attributes_size() const {
  return _internal_attributes_size();
}
inline void InstrumentationScope::clear_attributes() {
  _internal_mutable_attributes()->Clear();
}
inline ::opentelemetry::proto::common::v1::KeyValue* InstrumentationScope::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
InstrumentationScope::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& InstrumentationScope::_internal_attributes(int index) const {
  return _internal_attributes().Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& InstrumentationScope::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* InstrumentationScope::_internal_add_attributes() {
  return _internal_mutable_attributes()->Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* InstrumentationScope::add_attributes() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
InstrumentationScope::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
  return _internal_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
InstrumentationScope::_internal_attributes() const {
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
InstrumentationScope::_internal_mutable_attributes() {
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 4;
inline void InstrumentationScope::clear_dropped_attributes_count() {
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t InstrumentationScope::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.common.v1.InstrumentationScope.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void InstrumentationScope::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.common.v1.InstrumentationScope.dropped_attributes_count)
}
inline ::uint32_t InstrumentationScope::_internal_dropped_attributes_count() const {
  return _impl_.dropped_attributes_count_;
}
inline void InstrumentationScope::_internal_set_dropped_attributes_count(::uint32_t value) {
  ;
  _impl_.dropped_attributes_count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh
