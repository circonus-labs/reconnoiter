<module>
  <name>snmp</name>
  <description><para>The snmp module provides SNMP polling support for reconnoiter.</para></description>
  <loader>C</loader>
  <image>snmp.so</image>
  <moduleconfig>
    <parameter name="debugging"
               required="optional"
               default="0"
               allowed="\d+">Enable debugging output within libnetsnmp-c.</parameter>
  </moduleconfig>
  <checkconfig>
    <parameter name="community"
               required="optional"
               default="public"
               allowed=".+">The SNMP community string providing read access.</parameter>
    <parameter name="port"
               required="optional"
               default="161"
               allowed="\d+">The UDP port to which SNMP queries will be sent.</parameter>
    <parameter name="version"
               required="optional"
               default="2c"
               allowed="(?:1|2c|3)">The SNMP version used for queries.</parameter>
    <parameter name="separate_queries"
               required="optional"
               default="false"
               allowed="(?:true|on|false|off)">Issue a separate query (PDU) for each OID; only applicable to v1 and v2c.</parameter>
    <parameter name="context_name"
               required="optional"
               allowed=".*">The SNMPv3 context name.</parameter>
    <parameter name="context_engine"
               required="optional"
               allowed="[0-9a-fA-F]+">The SNMPv3 context engine id.</parameter>
    <parameter name="security_level"
               required="optional"
               default="nanp"
               allowed="(?:nanp|anp|ap|noAuthNoPriv|authNoPriv|authPriv)">The SNMPv3 security level. nanp: noAuthNoPriv, anp: authNoPriv, ap, authPriv.</parameter>
    <parameter name="security_name"
               required="optional"
               allowed=".*">The SNMPv3 security name (user).</parameter>
    <parameter name="security_engine"
               required="optional"
               default=""
               allowed="[0-9a-fA-F]+">The SNMPv3 security engine id.</parameter>
    <parameter name="auth_protocol"
               required="optional"
               default="MD5"
               allowed="(?:MD5|SHA)">The SNMPv3 security authorization hashing algorithm.</parameter>
    <parameter name="auth_passphrase"
               required="optional"
               allowed=".*">The SNMPv3 security authorization passphrase</parameter>
    <parameter name="privacy_protocol"
               required="optional"
               allowed="(?:DES|AES|AES128)">The SNMPv3 security encryption algorithm.</parameter>
    <parameter name="privacy_passphrase"
               required="optional"
               allowed=".*">The SNMPv3 security privacy passphrase</parameter>
    <parameter name="oid_.+"
               required="optional"
               allowed=".+">Defines a metric to query.  Key oid_foo will establish a metric called foo.  The value of the parameter should be an OID either in decimal notation or MIB name.</parameter>
    <parameter name="type_.+"
               required="optional"
               allowed=".+">Defines a coercion for a metric type.  The name of the metric must identically match one of the oid_(.+) patterns. The value can be either one of the single letter codes in the metric_type_t enum or the following string variants: guess, int32, uint32, int64, uint64, double, string.</parameter>
    <parameter name="separate_queries"
               required="optional"
               default="false"
               allowed="^(?:true|false|on|off)$">Whether or not to query each OID separately.</parameter>
  </checkconfig>
  <examples>
    <example>
      <title>Simple snmp polling of two switchports</title>
      <para>The following example configures SNMP checks against switchport 1 and 2
      on the switch with the IP address 10.80.116.3.</para>
      <programlisting><![CDATA[
      <noit>
        <modules>
          <module image="snmp" name="snmp"/>
        </modules>
        <checks>
          <switch target="10.80.116.3" module="snmp">
            <config>
              <community>SeKr3t</community>
              <oid_description>IF-MIB::ifName.%[name]</oid_description>
              <oid_alias>IF-MIB::ifAlias.%[name]</oid_alias>
              <oid_speed>IF-MIB::ifSpeed.%[name]</oid_speed>
              <oid_adminstatus>IF-MIB::ifAdminStatus.%[name]</oid_adminstatus>
              <oid_operstatus>IF-MIB::ifOperStatus.%[name]</oid_operstatus>
              <oid_inoctets>IF-MIB::ifHCInOctets.%[name]</oid_inoctets>
              <oid_outoctets>IF-MIB::ifHCOutOctets.%[name]</oid_outoctets>
              <oid_inerrors>IF-MIB::ifInErrors.%[name]</oid_inerrors>
              <oid_outerrors>IF-MIB::ifOutErrors.%[name]</oid_outerrors>
              <oid_indiscards>IF-MIB::ifInDiscards.%[name]</oid_indiscards>
              <oid_outdiscards>IF-MIB::ifOutDiscards.%[name]</oid_outdiscards>
              <oid_inucastpkts>IF-MIB::ifHCInUcastPkts.%[name]</oid_inucastpkts>
              <oid_outucastpkts>IF-MIB::ifHCOutUcastPkts.%[name]</oid_outucastpkts>
              <oid_inbcastpkts>IF-MIB::ifHCInBroadcastPkts.%[name]</oid_inbcastpkts>
              <oid_outbcastpkts>IF-MIB::ifHCOutBroadcastPkts.%[name]</oid_outbcastpkts>
            </config>
            <check uuid="1b4e28ba-2fa1-11d2-883f-e9b761bde3fb" name="1"/>
            <check uuid="4deb0724-ccee-4360-83bc-255e7b9d989d" name="2"/>
          </switch>
        </checks>
      </noit>
    ]]></programlisting>
    </example>
    <example>
      <title>Example using config inheritance to show reuse</title>
      <para>Accomplising the same goal, but by using reuse:</para>

      <programlisting><![CDATA[
      <noit>
        <modules>
          <module image="snmp" name="snmp"/>
        </modules>
        <checks>
          <switch target="10.80.116.3" module="snmp">
            <config inherit="SwitchPortX"/>
              <community>SeKr3t</community>
            </config>
            <check uuid="1b4e28ba-2fa1-11d2-883f-e9b761bde3fb" name="1"/>
            <check uuid="4deb0724-ccee-4360-83bc-255e7b9d989d" name="2"/>
          </switch>
        </checks>
        <config_templates>
          <config id="SwitchPortX">
            <oid_description>IF-MIB::ifName.%[name]</oid_description>
            <oid_alias>IF-MIB::ifAlias.%[name]</oid_alias>
            <oid_speed>IF-MIB::ifSpeed.%[name]</oid_speed>
            <oid_adminstatus>IF-MIB::ifAdminStatus.%[name]</oid_adminstatus>
            <oid_operstatus>IF-MIB::ifOperStatus.%[name]</oid_operstatus>
            <oid_inoctets>IF-MIB::ifHCInOctets.%[name]</oid_inoctets>
            <oid_outoctets>IF-MIB::ifHCOutOctets.%[name]</oid_outoctets>
            <oid_inerrors>IF-MIB::ifInErrors.%[name]</oid_inerrors>
            <oid_outerrors>IF-MIB::ifOutErrors.%[name]</oid_outerrors>
            <oid_indiscards>IF-MIB::ifInDiscards.%[name]</oid_indiscards>
            <oid_outdiscards>IF-MIB::ifOutDiscards.%[name]</oid_outdiscards>
            <oid_inucastpkts>IF-MIB::ifHCInUcastPkts.%[name]</oid_inucastpkts>
            <oid_outucastpkts>IF-MIB::ifHCOutUcastPkts.%[name]</oid_outucastpkts>
            <oid_inbcastpkts>IF-MIB::ifHCInBroadcastPkts.%[name]</oid_inbcastpkts>
            <oid_outbcastpkts>IF-MIB::ifHCOutBroadcastPkts.%[name]</oid_outbcastpkts>
          </config>
        </config_templates>
      </noit>
    ]]></programlisting>
    </example>
  </examples>
</module>
