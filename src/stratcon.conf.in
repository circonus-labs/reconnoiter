<?xml version="1.0" encoding="utf8" standalone="yes"?>
<stratcon lockfile="/var/run/stratcond.lock">
  <!-- <watchdog glider="/opt/gimli/bin/glider" tracedir="/var/log/stratcond.crash"/> -->
  <eventer/>

  <logs>
    <console_output>
      <outlet name="stderr"/>
      <log name="error"/>
      <log name="debug"/>
      <log name="error/eventer" disabled="true"/>
      <log name="error/datastore" disabled="true"/>
      <log name="debug/eventer" disabled="true"/>
    </console_output>
  </logs>

  <modules directory="%modulesdir%">
    <generic image="stomp_driver" name="stomp_driver"/>
    <generic image="postgres_ingestor" name="postgres_ingestor"/>
  </modules>

  <noits>
    <config>
      <!--
        If we have a connection failure, attempt to reconnect
        immediately.  Upon failure wait 1000ms (1s) and
        exponentially backoff up to 900000ms (900s or 15m)
      -->
      <reconnect_initial_interval>1000</reconnect_initial_interval>
      <reconnect_maximum_interval>15000</reconnect_maximum_interval>
    </config>
    <sslconfig>
      <key_file>%sysconfdir%/%PKIPREFIX%stratcon.key</key_file>
      <certificate_file>%sysconfdir%/%PKIPREFIX%stratcon.crt</certificate_file>
      <ca_chain>%sysconfdir%/%PKIPREFIX%ca.crt</ca_chain>
    </sslconfig>
    <noit address="127.0.0.1" port="43191" />
  </noits>

  <database>
    <journal>
      <path>/var/log/stratcon.persist</path>
    </journal>
    <dbconfig>
      <host>localhost</host>
      <dbname>reconnoiter</dbname>
      <user>stratcon</user>
      <password>unguessable</password>
    </dbconfig>
    <statements>
      <!-- These are optional and used for stuff like setting search paths -->
      <!--
      <metanodepostconnect><![CDATA[
        SELECT do_some_magic();
      ]]></metanodepostconnect>
      <storagepostconnect><![CDATA[
        SELECT do_some_magic($1,$2);
      ]]></storagepostconnect>
      -->
      <allchecks><![CDATA[
        SELECT remote_address, id, target, module, name
          FROM check_currently
      ]]></allchecks>
      <findcheck><![CDATA[
        SELECT remote_address, id, target, module, name
          FROM check_currently
         WHERE sid = $1
      ]]></findcheck>
      <allstoragenodes><![CDATA[
        SELECT storage_node_id, fqdn, dsn
          FROM stratcon.storage_node
      ]]></allstoragenodes>
      <findstoragenode><![CDATA[
        SELECT fqdn, dsn
          FROM stratcon.storage_node
         WHERE storage_node_id = $1
      ]]></findstoragenode>
      <mapallchecks><![CDATA[
        SELECT id, sid, noit as remote_cn, storage_node_id, fqdn, dsn
          FROM stratcon.map_uuid_to_sid LEFT JOIN stratcon.storage_node USING (storage_node_id)
      ]]></mapallchecks>
      <mapchecktostoragenode><![CDATA[
        SELECT o_storage_node_id as storage_node_id, o_sid as sid,
               o_fqdn as fqdn, o_dsn as dsn, o_noit as remote_cn
          FROM stratcon.map_uuid_to_sid($1,$2)
      ]]></mapchecktostoragenode>
      <check><![CDATA[
        INSERT INTO check_archive_%Y%m%d
                    (remote_address, whence, sid, id, target, module, name)
             VALUES ($1, 'epoch'::timestamptz + ($2 || ' seconds')::interval,
                     $3, $4, $5, $6, $7)
      ]]></check>
      <status><![CDATA[
        INSERT INTO check_status_archive_%Y%m%d
                    (whence, sid, state, availability, duration, status)
             VALUES ('epoch'::timestamptz + ($1 || ' seconds')::interval,
                     $2, $3, $4, $5, $6)
      ]]></status>
      <metric_numeric><![CDATA[
        INSERT INTO metric_numeric_archive_%Y%m%d
                    (whence, sid, name, value)
             VALUES ('epoch'::timestamptz + ($1 || ' seconds')::interval,
                     $2, $3, $4)
      ]]></metric_numeric>
      <metric_text><![CDATA[
        INSERT INTO metric_text_archive_%Y%m%d
                    ( whence, sid, name,value)
             VALUES ('epoch'::timestamptz + ($1 || ' seconds')::interval,
                     $2, $3, $4)
      ]]></metric_text>
      <config><![CDATA[
        SELECT stratcon.update_config
               ($1, $2, $3,
                'epoch'::timestamptz + ($4 || ' seconds')::interval,
                $5)
      ]]></config>
      <findconfig><![CDATA[
        SELECT config FROM stratcon.current_node_config WHERE remote_cn = $1
      ]]></findconfig>
    </statements>
  </database>

  <listeners>
    <sslconfig>
      <key_file>%sysconfdir%/%PKIPREFIX%stratcon.key</key_file>
      <certificate_file>%sysconfdir%/%PKIPREFIX%stratcon.crt</certificate_file>
      <ca_chain>%sysconfdir%/%PKIPREFIX%ca.crt</ca_chain>
    </sslconfig>
    <consoles type="noit_console">
      <listener address="/tmp/stratcon">
        <config><line_protocol>telnet</line_protocol></config>
      </listener>
    </consoles>
    <realtime type="http_rest_api">
      <listener address="*" port="80">
        <config>
          <hostname>stratcon.noit.example.com</hostname>
          <document_domain>noit.example.com</document_domain>
        </config>
      </listener>
    </realtime>
    <listener type="control_dispatch" address="*" port="43191" ssl="on" />
  </listeners>

  <rest>
    <acl type="deny">
      <rule type="deny" url="/\.svn"/>
      <rule type="allow" cn="^admin$"/>
      <rule type="allow" cn="^nagios$" url="^/noits/show$"/>
      <rule type="allow" url="^/noits/config$"/>
      <rule type="allow" url="^/data/"/>
      <rule type="allow" url="^/$"/>
    </acl>
  </rest>

</stratcon>
