/*
 * Generated by dtrace(1M).
 */

#ifndef	_DTRACE_PROBES_H
#define	_DTRACE_PROBES_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#if _DTRACE_VERSION

#define	STRATCON_NOIT_CONNECT(arg0, arg1, arg2, arg3) \
	__dtrace_stratcon_noit___connect(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_ENABLED() \
	__dtraceenabled_stratcon_noit___connect()
#else
#define	STRATCON_NOIT_CONNECT_ENABLED() \
	__dtraceenabled_stratcon_noit___connect(0)
#endif
#define	STRATCON_NOIT_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_stratcon_noit___connect__close(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_CLOSE_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__close()
#else
#define	STRATCON_NOIT_CONNECT_CLOSE_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__close(0)
#endif
#define	STRATCON_NOIT_CONNECT_FAILED(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_stratcon_noit___connect__failed(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_FAILED_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__failed()
#else
#define	STRATCON_NOIT_CONNECT_FAILED_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__failed(0)
#endif
#define	STRATCON_NOIT_CONNECT_SSL(arg0, arg1, arg2, arg3) \
	__dtrace_stratcon_noit___connect__ssl(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_SSL_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl()
#else
#define	STRATCON_NOIT_CONNECT_SSL_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl(0)
#endif
#define	STRATCON_NOIT_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_stratcon_noit___connect__ssl__failed(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_SSL_FAILED_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl__failed()
#else
#define	STRATCON_NOIT_CONNECT_SSL_FAILED_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl__failed(0)
#endif
#define	STRATCON_NOIT_CONNECT_SSL_SUCCESS(arg0, arg1, arg2, arg3) \
	__dtrace_stratcon_noit___connect__ssl__success(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_SSL_SUCCESS_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl__success()
#else
#define	STRATCON_NOIT_CONNECT_SSL_SUCCESS_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__ssl__success(0)
#endif
#define	STRATCON_NOIT_CONNECT_SUCCESS(arg0, arg1, arg2, arg3) \
	__dtrace_stratcon_noit___connect__success(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	STRATCON_NOIT_CONNECT_SUCCESS_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__success()
#else
#define	STRATCON_NOIT_CONNECT_SUCCESS_ENABLED() \
	__dtraceenabled_stratcon_noit___connect__success(0)
#endif
#define	STRATCON_NOIT_RESCHEDULE(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_stratcon_noit___reschedule(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	STRATCON_NOIT_RESCHEDULE_ENABLED() \
	__dtraceenabled_stratcon_noit___reschedule()
#else
#define	STRATCON_NOIT_RESCHEDULE_ENABLED() \
	__dtraceenabled_stratcon_noit___reschedule(0)
#endif
#define	STRATCON_NOIT_SHUTDOWN_PERMANENT(arg0, arg1, arg2, arg3) \
	__dtrace_stratcon_noit___shutdown__permanent(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	STRATCON_NOIT_SHUTDOWN_PERMANENT_ENABLED() \
	__dtraceenabled_stratcon_noit___shutdown__permanent()
#else
#define	STRATCON_NOIT_SHUTDOWN_PERMANENT_ENABLED() \
	__dtraceenabled_stratcon_noit___shutdown__permanent(0)
#endif
#define	STRATCON_NOIT_STREAM_BODY(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) \
	__dtrace_stratcon_noit___stream__body(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
#ifndef	__sparc
#define	STRATCON_NOIT_STREAM_BODY_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__body()
#else
#define	STRATCON_NOIT_STREAM_BODY_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__body(0)
#endif
#define	STRATCON_NOIT_STREAM_CHECKPOINT(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_stratcon_noit___stream__checkpoint(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	STRATCON_NOIT_STREAM_CHECKPOINT_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__checkpoint()
#else
#define	STRATCON_NOIT_STREAM_CHECKPOINT_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__checkpoint(0)
#endif
#define	STRATCON_NOIT_STREAM_COUNT(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_stratcon_noit___stream__count(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	STRATCON_NOIT_STREAM_COUNT_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__count()
#else
#define	STRATCON_NOIT_STREAM_COUNT_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__count(0)
#endif
#define	STRATCON_NOIT_STREAM_HEADER(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) \
	__dtrace_stratcon_noit___stream__header(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
#ifndef	__sparc
#define	STRATCON_NOIT_STREAM_HEADER_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__header()
#else
#define	STRATCON_NOIT_STREAM_HEADER_ENABLED() \
	__dtraceenabled_stratcon_noit___stream__header(0)
#endif


extern void __dtrace_stratcon_noit___connect(int, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect(void);
#else
extern int __dtraceenabled_stratcon_noit___connect(long);
#endif
extern void __dtrace_stratcon_noit___connect__close(int, char *, char *, char *, int, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__close(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__close(long);
#endif
extern void __dtrace_stratcon_noit___connect__failed(int, char *, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__failed(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__failed(long);
#endif
extern void __dtrace_stratcon_noit___connect__ssl(int, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__ssl(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__ssl(long);
#endif
extern void __dtrace_stratcon_noit___connect__ssl__failed(int, char *, char *, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__ssl__failed(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__ssl__failed(long);
#endif
extern void __dtrace_stratcon_noit___connect__ssl__success(int, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__ssl__success(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__ssl__success(long);
#endif
extern void __dtrace_stratcon_noit___connect__success(int, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___connect__success(void);
#else
extern int __dtraceenabled_stratcon_noit___connect__success(long);
#endif
extern void __dtrace_stratcon_noit___reschedule(int, char *, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___reschedule(void);
#else
extern int __dtraceenabled_stratcon_noit___reschedule(long);
#endif
extern void __dtrace_stratcon_noit___shutdown__permanent(int, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___shutdown__permanent(void);
#else
extern int __dtraceenabled_stratcon_noit___shutdown__permanent(long);
#endif
extern void __dtrace_stratcon_noit___stream__body(int, char *, char *, char *, int, int, int, int, char *);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___stream__body(void);
#else
extern int __dtraceenabled_stratcon_noit___stream__body(long);
#endif
extern void __dtrace_stratcon_noit___stream__checkpoint(int, char *, char *, char *, int, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___stream__checkpoint(void);
#else
extern int __dtraceenabled_stratcon_noit___stream__checkpoint(long);
#endif
extern void __dtrace_stratcon_noit___stream__count(int, char *, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___stream__count(void);
#else
extern int __dtraceenabled_stratcon_noit___stream__count(long);
#endif
extern void __dtrace_stratcon_noit___stream__header(int, char *, char *, char *, int, int, int, int, int);
#ifndef	__sparc
extern int __dtraceenabled_stratcon_noit___stream__header(void);
#else
extern int __dtraceenabled_stratcon_noit___stream__header(long);
#endif

#else

#define	STRATCON_NOIT_CONNECT(arg0, arg1, arg2, arg3)
#define	STRATCON_NOIT_CONNECT_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4, arg5)
#define	STRATCON_NOIT_CONNECT_CLOSE_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_FAILED(arg0, arg1, arg2, arg3, arg4)
#define	STRATCON_NOIT_CONNECT_FAILED_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_SSL(arg0, arg1, arg2, arg3)
#define	STRATCON_NOIT_CONNECT_SSL_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4, arg5)
#define	STRATCON_NOIT_CONNECT_SSL_FAILED_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_SSL_SUCCESS(arg0, arg1, arg2, arg3)
#define	STRATCON_NOIT_CONNECT_SSL_SUCCESS_ENABLED() (0)
#define	STRATCON_NOIT_CONNECT_SUCCESS(arg0, arg1, arg2, arg3)
#define	STRATCON_NOIT_CONNECT_SUCCESS_ENABLED() (0)
#define	STRATCON_NOIT_RESCHEDULE(arg0, arg1, arg2, arg3, arg4)
#define	STRATCON_NOIT_RESCHEDULE_ENABLED() (0)
#define	STRATCON_NOIT_SHUTDOWN_PERMANENT(arg0, arg1, arg2, arg3)
#define	STRATCON_NOIT_SHUTDOWN_PERMANENT_ENABLED() (0)
#define	STRATCON_NOIT_STREAM_BODY(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
#define	STRATCON_NOIT_STREAM_BODY_ENABLED() (0)
#define	STRATCON_NOIT_STREAM_CHECKPOINT(arg0, arg1, arg2, arg3, arg4, arg5)
#define	STRATCON_NOIT_STREAM_CHECKPOINT_ENABLED() (0)
#define	STRATCON_NOIT_STREAM_COUNT(arg0, arg1, arg2, arg3, arg4)
#define	STRATCON_NOIT_STREAM_COUNT_ENABLED() (0)
#define	STRATCON_NOIT_STREAM_HEADER(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
#define	STRATCON_NOIT_STREAM_HEADER_ENABLED() (0)

#endif

#if _DTRACE_VERSION

#define	NOIT_CHECK_DISPATCH(arg0, arg1, arg2, arg3) \
	__dtrace_noit___check__dispatch(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	NOIT_CHECK_DISPATCH_ENABLED() \
	__dtraceenabled_noit___check__dispatch()
#else
#define	NOIT_CHECK_DISPATCH_ENABLED() \
	__dtraceenabled_noit___check__dispatch(0)
#endif
#define	NOIT_CHECK_METRIC(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
	__dtrace_noit___check__metric(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
#ifndef	__sparc
#define	NOIT_CHECK_METRIC_ENABLED() \
	__dtraceenabled_noit___check__metric()
#else
#define	NOIT_CHECK_METRIC_ENABLED() \
	__dtraceenabled_noit___check__metric(0)
#endif
#define	NOIT_CHECK_STATUS(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
	__dtrace_noit___check__status(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
#ifndef	__sparc
#define	NOIT_CHECK_STATUS_ENABLED() \
	__dtraceenabled_noit___check__status()
#else
#define	NOIT_CHECK_STATUS_ENABLED() \
	__dtraceenabled_noit___check__status(0)
#endif


extern void __dtrace_noit___check__dispatch(char *, char *, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_noit___check__dispatch(void);
#else
extern int __dtraceenabled_noit___check__dispatch(long);
#endif
extern void __dtrace_noit___check__metric(char *, char *, char *, char *, char *, int, char *);
#ifndef	__sparc
extern int __dtraceenabled_noit___check__metric(void);
#else
extern int __dtraceenabled_noit___check__metric(long);
#endif
extern void __dtrace_noit___check__status(char *, char *, char *, char *, int, int, char *);
#ifndef	__sparc
extern int __dtraceenabled_noit___check__status(void);
#else
extern int __dtraceenabled_noit___check__status(long);
#endif

#else

#define	NOIT_CHECK_DISPATCH(arg0, arg1, arg2, arg3)
#define	NOIT_CHECK_DISPATCH_ENABLED() (0)
#define	NOIT_CHECK_METRIC(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
#define	NOIT_CHECK_METRIC_ENABLED() (0)
#define	NOIT_CHECK_STATUS(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
#define	NOIT_CHECK_STATUS_ENABLED() (0)

#endif


#ifdef	__cplusplus
}
#endif

#endif	/* _DTRACE_PROBES_H */
